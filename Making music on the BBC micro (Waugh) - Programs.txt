# Title
## Chapter
### Heading
#### Notes
---


# Making music on the BBC micro

## Chapter 1

### Looking at sound waves

10 REM PROGRAM 1.1
20 REM Sine Wave Plotter
30
40 MODE 4
50 REM Define Windows
60 VDU28,0,4,39,0
70 VDU24,0,0;1279;850; 
80
90 REPEAT
100 INPUT"Frequency (1-10)",Freq
110 INPUT"Amplitude (50-400)",Amp 
120 PROCSine
130 PRINT"Press SPACE to enter another wave"'"'C' to clear screen, 'F' to finish"
140 REPEAT
150 Key=GET
160 UNTIL Key=32 OR Key=67 OR Key=70
170 IF Key=67 THEN CLG
180 UNTIL Key=70
190 MODE7
200 END
210
220 DEF PROCSine
230 VDU29,0;450;
240 MOVE0,0
250 FOR Time=0 TO 1279 STEP 10
260 DRAWTime,Amp*SIN(RAD(Freq*Time))
270 NEXT Time
280 ENDPROC

#### Adding a harmonic


5 REM With harmonic in line 260
10 REM PROGRAM 1.1
20 REM Sine Wave Plotter
30
40 MODE 4
50 REM Define Windows
60 VDU28,0,4,39,0
70 VDU24,0,0;1279;850; 
80
90 REPEAT
100 INPUT"Frequency (1-10)",Freq
110 INPUT"Amplitude (50-400)",Amp 
120 PROCSine
130 PRINT"Press SPACE to enter another wave"'"'C' to clear screen, 'F' to finish"
140 REPEAT
150 Key=GET
160 UNTIL Key=32 OR Key=67 OR Key=70
170 IF Key=67 THEN CLG
180 UNTIL Key=70
190 MODE7
200 END
210
220 DEF PROCSine
230 VDU29,0;450;
240 MOVE0,0
250 FOR Time=0 TO 1279 STEP 10
260 DRAWTime,Amp *SIN(RAD(Freq*Time))+Amp*SIN (RAD(Freq *2*Time))
270 NEXT Time
280 ENDPROC

### The sound of the BBC micro

10 FOR Pitch=1 TO 253 STEP 4
20 SOUND1,-15,Pitch,10
30 NEXT Pitch

### Pitch

10 FOR Pitch=53 TO 149
20 SOUND1,-15,Pitch,1
30 NEXT Pitch

10 FOR Pitch=53 TO 149 STEP 4
20 SOUND1,-15,Pitch,1
30 NEXT Pitch


10 FOR Pitch=101 TO 149
20 SOUND1, -15,Pitch,10
30 NEXT Pitch

10 FOR Pitch=1 TO 255
20 SOUND1, -15,Pitch,10
30 NEXT Pitch

### Volume

40 FOR Volume =-15 TO -1
50 SOUND1, Volume,53,1
60 NEXT Volume


10 FOR Volume=1 TO -15 STEP -1
20 SOUND1,Volume,53,1
30 NEXT Volume

10 ENVELOPE1,1,0,0,0,0,0,0,127,-1,-1,-1,126,1
20 FOR Pitch=53 TO 101
30 SOUND1,1,Pitch,10
40 NEXT Pitch

10 ENVELOPE1,1,0,0,0,0,0,0,127,-1,-1,-1,126,1
20 FOR Pitch=149 TO 245 STEP 5
30 SOUND1,1,Pitch,10
40 NEXT Pitch

10 ENVELOPE1,1,0,0,0,0,0,0,3,-100,0,0,126,0
20 FOR Pitch=53 TO 101
30 SOUND1,1,Pitch,10
40 NEXT Pitch

### Duration
n/a
### Motility

10 REM PROGRAM 1.2
20 REM Motility Tester
30
40 ON ERROR GOTO 290
50
60 ENVELOPE1,11,16,4,8,2,1,1,100,0,0,-100,100,100
70 REM Turn off Auto Repeat 80 *FX11,0
90
100 REPEAT
110 Score=0
120 CLS
130 PRINTTAB(4,6)"Tap the RETURN key repeatedly"'" d with"'"as quickly as possible an the minimum of movement."
140 Begin=GET
150 TIME=0
160
170 REPEAT
180 Tap=INKEY(0):IF Tap=13 Score=Score+1
190 UNTIL TIME>=500
200
210 PRINTTAB(16,10)"STOP"
220 SOUND1,1,100,20
230 PRINTTAB(6,12)"Your MOTILITY rating is"'Score/5;" taps per second"
240 PRINTTAB(8,15)"Another try (Y/N)?"
250 REPEAT:Key=GET AND &DF:UNTIL Key=89 OR Key=78
260 UNTIL Key=78
270
280 REM Turn On Auto Repeat 290 *FX12,0
300 END

### Timbre

#### Sawtooth wave

10 REM PROGRAM 1.1
20 REM Sine Wave Plotter
30
40 MODE 4
50 REM Define Windows
60 VDU28,0,4,39,0
70 VDU24,0,0;1279;850; 
80
90 REPEAT
100 INPUT"Frequency (1-10)",Freq
110 INPUT"Amplitute (50-400)",Amp 
120 PROCSine
130 PRINT"Press SPACE to enter another wave"'"'C' to clear screen, 'F' to finish"
140 REPEAT
150 Key=GET
160 UNTIL Key=32 OR Key=67 OR Key=70
170 IF Key=67 THEN CLG
180 UNTIL Key=70
190 MODE7
200 END
210
220 DEF PROCSine
230 VDU29,0;450;
240 MOVE0,0
250 FOR Time=0 TO 1279 STEP 10
260 DRAWTime,Amp*SIN(RAD(Freq*Time))+Amp*1/2*SIN (RAD(Freq*2*Time))+Amp*1/3*SIN(RAD(Freq*3*Time))+ Amp*1/4*SIN(RAD(Freq*4*Time))+Amp*1/5*SIN (RAD(Freq*5*Time))
270 NEXT Time
280 ENDPROC

### Square wave

10 REM PROGRAM 1.1
20 REM Sine Wave Plotter
30
40 MODE 4
50 REM Define Windows
60 VDU28,0,4,39,0
70 VDU24,0,0;1279;850; 
80
90 REPEAT
100 INPUT"Frequency (1-10)",Freq
110 INPUT"Amplitute (50-400)",Amp 
120 PROCSine
130 PRINT"Press SPACE to enter another wave"'"'C' to clear screen, 'F' to finish"
140 REPEAT
150 Key=GET
160 UNTIL Key=32 OR Key=67 OR Key=70
170 IF Key=67 THEN CLG
180 UNTIL Key=70
190 MODE7
200 END
210
220 DEF PROCSine
230 VDU29,0;450;
240 MOVE0,0
250 FOR Time=0 TO 1279 STEP 10
260 DRAWTime,Amp*SIN(RAD(Freq*Time))+Amp*1/3*SIN (RAD(Freq*3*Time))+Amp*1/5*SIN(RAD(Freq*5*Time))+ Amp*1/7*SIN(RAD(Freq*7*Time))
270 NEXT Time
280 ENDPROC

## Chapter 2

### The pitch of a note

10 FOR Scale=1 TO 8
20 READ Pitch
30 SOUND1 ,-15,Pitch,10
40 NEXT Scale
50 END
60 DATA 53,61,69,73,81,89,97 ,101

### Scales

10 FOR Pitch=5 TO 245 STEP 48
20 SOUND1,-15,Pitch,10
30 NEXT Pitch


10 Note=53
20 FOR Pitch=1 TO 8
30 READ Interval
40 Note=Note+Interval
50 SOUND1,- 15,Note,10
60 NEXT Pitch
70 END
80 DATA 0,8,8,4,8,8,8,4

### Harmony and chords

10 REM PROGRAM 2.1
20 REM Chord Sound Demonstration
30
40 CLS
50 PRINT'''
60
70 FOR Chord=1 TO 4
80 READ Chord$,Notes$,Pitch1,Pitch2 
90 PRINT"C ";Chord$;"=C + "Notes$'
100 SOUND&201,-12,53,60
110 SOUND&202,-12,Pitch1,60
120 SOUND&203,-12,Pitch2,60
130 PROCDelay(300)
140 NEXT Chord
150
160 REM Chords with 4 Notes
170 FOR Arp=1 TO 5
180 READ Chord$,Notes$
190 PRINT"C ";Chord$;" (Arpeggio)=C +"Notes$'
200 FOR Note=1 TO 17
210 READ Pitch
220 SOUND1,-15,Pitch,3
230 NEXT Note
240 PROCDelay(200)
250 NEXT Arp
260 END
270
280 DEF PROCDelay(Time)
290 TIME=0:REPEAT UNTIL TIME>Time
300 ENDPROC
310
320 DATA Major,E + G,69,81
330 DATA Minor,Eb + G,65,81
340 DATA Augmented,E + G#,69,85
350 DATA Suspended 4th,F + G,73,81
360 DATA Diminished,Eb + Gb + A,53,65,77,89,101,113,125,137,149,137,125,113,10 1,89,77,65,53
370 DATA 7th,E + G + Bb,53,69,81,93,10 1,117,129,141,149,141,129,117,101,93,81, 69,53
380 DATA Major 7th,E + G + B,53,69,81, 97,101,117,129,145,149,145,129,117,101,9 7,81,69,53
390 DATA Major Sixth,E + G + A,53,69,8 1,89,101,117,129,137,149,137,129,117,101 ,89,81,69,53
400 DATA Minor Sixth,Eb + G + A,53,65, 81,89,101,113,129,137,149,137,129,113,10 1,89,81,65,53

## Chapter 3 

### Pitch

10 REM Hawaiian Guitar
20 ENVELOPE1,132,0,0,0,0,0,0,126,-10,0,-4,126,100 
30 ENVELOPE2,132,-8,0,1,1,0,8,126,-10,0,-4,126,100 
40 FOR Note=1 TO 8
50 READ Env,Pitch,Dur
60 SOUND 1,Env,Pitch,Dur
70 NEXT Note
80 END
90 DATA1,53 ,5,1,41,10,1,53,10,2,73,15
100 DATA1,41,5,1,33,10, 1,53,10,2,69,20


### Note to Number Conversion Program

10 REM PROGRAM 3.1
20 REM Basic Program to Convert
30 REM Note Names & Octave Numbers 40 REM Into PITCH values
50
60 PROCSetup
70 FOR Count=1 TO 16
80 PROCChooseNote
90 PROCPlayNote
100 NEXT Count
110 END
120
130 DEF PROCSetup
140 Scale$="  C  C# D  D# E  F  F# G  G# A  A# B" 
150
160 REM Key Sets Value
170 REM Key=1 Will Play as You Would
220 Key=1
230
240 DIM NotesToChooseFrom$(15)
250 FOR S%=1 TO 15
260 READ Note$
270 NotesToChooseFrom$(S%)=Note$
280 NEXT S%
290 ENDPROC
300
310 DATAG1,A0,B0,C2,D2,E2,F#2,G2,A2,B2,C3,D3,E3,F#3,G3
320
330 DEF PROCChooseNote
340 Note=RND(15)
350 Note$=NotesToChooseFrom$(Note)
360 ENDPROC
370
380 DEF PROCPlayNote
390 PROCAnalyseNote
400 PROCCalculatePitch
410 PRINT Note$,Pitch,Octave
420 SOUND1,-15,Pitch,5:SOUND1,0,0,0
430 ENDPROC
440
450 DEF PROCAnalyseNote
460 IF LEN(Note$)<2 OR LEN(Note$)>3 THEN PRINT"ERROR IN DATA ";Note$:STOP
470 IF LEN(Note$)=2 THEN NoteName$=LEFT$(Note$,1) ELSE NoteName$=LEFT$(Note$,2)
480 PositionInScale=INSTR(Scale$,NoteName$)/3
490 Octave=VAL(RIGHT$(Note$,1))
500 ENDPROC
510
520 DEF PROCCalculatePitch
530 Pitch=Key+PositionInScale*4+(Octave-1)*48
540 IF Pitch<0 OR Pitch>255 THEN PRINT"ERROR IN DATA ";Note$:STOP
550 ENDPROC

#### The lowest A#

10 FOR Pitch=13 TO 1 STEP -4
20 SOUND1,-15,Pitch,8
30 NEXT Pitch
40 SOUND1,-15,0,8


## Chapter 4

### Hold


10 REM PROGRAM 4.1
20 REM HOLD PARAMETER DEMONSTRATION 
30
40 ENVELOPE1,4,0,0,0,0,0,0,126,-1,0,-1,126,60
50 TIME=0
60
70 SOUND1,1,53,40 
80 PROCTime
90 SOUND1,1,69,20
100 PROCTime
110 END
120
130 DEF PROCTime 
140 REPEAT
150 IF TIME/100=INT(TIME/100) PRINT TIME/100
160 UNTIL TIME>800 
170 STOP
180 ENDPROC

10 REM PROGRAM 4.1a - extra hold, one less call to PROCTime
20 REM HOLD PARAMETER DEMONSTRATION 
30
40 ENVELOPE1,4,0,0,0,0,0,0,126,-1,0,-1,126,60
50 TIME=0
60
70 SOUND1,1,53,40 
80 REM No time, no pause/hold
90 SOUND1,1,69,20
100 PROCTime
110 END
120
130 DEF PROCTime 
140 REPEAT
150 IF TIME/100=INT(TIME/100) PRINT TIME/100
160 UNTIL TIME>800 
170 STOP
180 ENDPROC

10 REM PROGRAM 4.1a - extra sound, one less call to PROCTime
20 REM HOLD PARAMETER DEMONSTRATION 
30
40 ENVELOPE1,4,0,0,0,0,0,0,126,-1,0,-1,126,60
50 TIME=0
60
70 SOUND1,1,53,40 
80 SOUND&1001,0,0,40
90 SOUND1,1,69,20
100 PROCTime
110 END
120
130 DEF PROCTime 
140 REPEAT
150 IF TIME/100=INT(TIME/100) PRINT TIME/100
160 UNTIL TIME>800 
170 STOP
180 ENDPROC


### Sychronisation

10 SOUND1,-15,73,30
20 SOUND2,-15,89,30
30 SOUND3,-15,101,30


10 SOUND&201,-15,73,30
20 SOUND&202,-15,89,30
30 SOUND&203,-15,101,30

10 SOUND1,-15,73,30
15 FOR Delay=1 TO 400:NEXT Delay
20 SOUND2,-15,89,30
30 SOUND3,-15,101,30


10 SOUND&201,-15,73,30
15 FOR Delay=1 TO 400:NEXT Delay
20 SOUND&202,-15,89,30
30 SOUND&203,-15,101,30

### Flush


10 REM PROGRAM 4.2
20 REM CHANNEL FLUSHING DEMONSTRATION
30 SOUND3,-10,5,245
40 SOUND1,-15,53,60:SOUND2,-12,5,60
50 SOUND1,-15,81,60:SOUND2,-12,53,60
60 SOUND1,-15,101,60:SOUND2,-12,53,60
70 SOUND1,-15,117,5:SOUND2,-12,69,5
80 SOUND1,-15,113,60:SOUND2,-12,65,60
90 PRINT"PRESS ANY KEY TO STOP"
100 IF INKEY(400)<>-1 THEN SOUND&11,0,0,0:SOUND&12,0,0,0:SOUND&13,0,0,0 ELSE PRINT"TOO LATE"
110 SOUND1,-15,149,2:SOUND1,-15,137,2
120 SOUND1,-15,129,2:SOUND1,-15,137,2
130 SOUND1,-15,145,2:SOUND1,-15,137,2
140 SOUND1,-15,145,2:SOUND1,-15,149,4


### Amplitude

n/a

### Pitch

5 REM Noise pitch 3
10 SOUND 0,-15,3,200
20 FOR Pitch=0 TO 200
30 SOUND1,0,Pitch,1
40 NEXT Pitch

5 REM Noise pitch 7
10 SOUND 0,-15,7,200
20 FOR Pitch=0 TO 200
30 SOUND1,0,Pitch,1
40 NEXT Pitch

### Duration

10 SOUND1,-15,53,20
20 SOUND1,-15,54,20

5 REM with 2/100 s gap between notes
10 SOUND1,-15,53,20
15 SOUND1,0,0,0
20 SOUND1,-15,54,20

10 TIME=0
20 FOR X%=0 TO 500
30 NEXT
40 PRINT TIME/100

5 REM with 2/100 s gap between notes
10 TIME=0
20 FOR X%=0 TO 500
25 SOUND1,0,0,0
30 NEXT
40 PRINT TIME/100



## Chapter 5

### ADSR and the ENVELOPE command


10 REM PROGRAM 5.1
20 REM ADSR Graph Generator
30
40 *TV255,1
50 MODE1
60 PROCSetUp
70 PROCAxis
80 Input$="":PROCReset:PROCPrintEnv
90
100 REPEAT
110 *FX15,1
120 Input$=GET$
130 IF Input$=" " PROCSound
140 IF Input$>="1" AND Input$<="8" PROCEnv
150 IF Input$="C" PROCAxis
160 UNTIL Input$="Q"
170 END
180
190 DEF PROCSetUp
200 REM Set Text Window
210 VDU28,0,4,39,0
220 REM Set Graphics Window
230 VDU24,0;0;1279;860;
240 REM Background=Yellow
250 GCOL0,130:CLG
260 REM Foreground=Black
270 GCOL0,0
280 REM Set COLOUR 1 to Flashing 
290 VDU19,1,9,0,0,0
300
310 REM Set Initial Parameters
320 PI1=0:PI2=0:PI3=0
330 PN1=0:PN2=0:PN3=0
340 T=20:T1=T:Pitch=10:Pit1=Pitch
350 AA=126:AD=-4:AS=-1:AR=-6
360 ALA=126:ALD=80:Duration=80
370 REM Marker for X Axis
380 VDU23,224,128,128,128,128,128,128,128,128
390 ENDPROC
400
410 DEF PROCAxis
420 YScale=6
430 CLG
440 VDU29,0;0;
450 MOVE50,0:DRAW50,860
460 MOVE0,50:DRAW1279,50
470 VDU5
480 FOR Mark%=0 TO 780 STEP YScale*10
490 MOVE20,Mark%+YScale*10:PRINT"-" 
500 NEXT Mark%
510 FOR Mark%=50 TO 1250 STEP 100
520 MOVEMark%,50:PRINTCHR$224
530 NEXT Mark%
540 VDU 4
550 REM Set Graphics Origin
560 VDU29,50;50;
570 ENDPROC
580
590 DEF PROCEnv
600 PROCReset
610 IF Input$="1" t=1
620 IF Input$="2" aa=1
630 IF Input$="3" ad=1
640 IF Input$="4" as=1
650 IF Input$="5" ar=1
660 IF Input$="6" ala=1
670 IF Input$="7" ald=1
680 IF Input$="8" dur=1
690 PROCPrintEnv
700 PROCAlter
710 PROCPrintEnv
720 ENDPROC
730
740 DEF PROCReset
750 b=3:t=3:aa=3:ad=3:as=3:ar=3
760 ala=3:ald=3:dur=3
770 ENDPROC
780
790 DEF PROCPrintEnv
800 COLOURb:PRINTTAB(0,0)"ENV1,";:COLOURt:PRINT;T;
810 COLOURb:PRINT;",";PI1;",";PI2;",";PI3;",";PN1;",";PN2;",";PN3;",";
820 COLOURaa:PRINT;AA;:COLOURb:PRINT;",";:COLOURad:PRINT;AD;:COLOURb:PRINT;",";
830 COLOURas:PRINT;AS;:COLOURb:PRINT;",";:COLOURar:PRINT;AR;:COLOURb:PRINT","; 
840 COLOURala:PRINT;ALA;:COLOURb:PRINT;",";:COLOURald:PRINT;ALD:COLOURb
850 COLOURdur:PRINTTAB(14,1)SPC(4)TAB(10,1)"Dur=";Duration:COLOURb
860 ENDPROC
870
880 DEF PROCAlter
890 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
900 IF NewVal$="" PROCReset:PROCPrintEnv:ENDPROC
910 NewVal=EVAL(NewVal$)
920 PRINTTAB(30,0)SPC(20)
930 ON EVAL(Input$) GOTO940,950,960,970,980,990,1000,1010
940 T=NewVal:T1=T:ENDPROC
950 AA=NewVal:ENDPROC
960 AD=NewVal:ENDPROC
970 AS=NewVal:ENDPROC
980 AR=NewVal:ENDPROC
990 ALA=NewVal:ENDPROC
1000 ALD=NewVal:ENDPROC
1010 Duration=NewVal:ENDPROC
1020
1030 DEF PROCSound
1040 ENVELOPE1,T,PI1,PI2,PI3,PN1,PN2,PN3,AA,AD,AS,AR,ALA,ALD
1050 SOUND1,1,Pit1,Duration
1060 REM Clear Last Timing Results
1070 PRINTTAB(0,4)SPC(39);:PRINTTAB(0,4);
1080 IF T=0 T1=1
1090 IF T=128MT1=129
1100 Time=0:Amp=0
1110 MOVE0,0
1120 YScale=6
1130 PROCAttack
1140 PROCPrint("A",8,32)
1150 IF OverTime GOTO 1210
1160 PROCDecay
1170 PROCPrint("D",8,32)
1180 IF OverTime GOTO 1210
1190 PROCSustain
1200 PROCPrint("S",8,32)
1210 PROCPrint("r",40,16)
1220 PROCRelease
1230 PROCPrint("R",0,0)
1240 PRINT;"Secs";
1250 ENDPROC
1260
1270 DEF PROCAttack
1280 REPEAT
1290 Amp=Amp+AA
1300 IF Amp>ALA Amp=ALA
1310 DRAW Time,Amp*YScale
1320 Time=Time+T1 MOD128
1330 PROCTimeCheck:IF OverTime GOTO1350
1340 DRAW Time,Amp*YScale
1350 UNTIL OverTime OR Amp=ALA
1360 ENDPROC
1370
1380 DEF PROCDecay
1390 REPEAT
1400 Amp=Amp+AD
1410 IF ALD<ALA:IF Amp<ALD Amp=ALD
1420 IF ALD>ALA:IF Amp>ALD Amp=ALD
1430 IF ALD=ALA Amp=ALD
1440 DRAW Time,Amp*YScale
1450 Time=Time+T1 MOD128
1460 PROCTimeCheck:IF OverTime GOTO1480
1470 DRAW Time,Amp*YScale
1480 UNTIL OverTime OR Amp=ALD
1490 ENDPROC
1500
1510 DEF PROCSustain
1520 REPEAT
1530 Amp=Amp+AS
1540 IF Amp<0 Amp=0
1550 DRAW Time,Amp*YScale
1560 Time=Time+T1 MOD128
1570 PROCTimeCheck:IF OverTime GOTO1590
1580 DRAW Time,Amp*YScale
1590 UNTIL OverTime OR Amp=0
1600 ENDPROC
1610
1620 DEF PROCRelease
1630 REPEAT
1640 Amp=Amp+AR
1650 IF Amp<0 Amp=0
1660 DRAW Time,Amp*YScale
1670 IF Amp=0 GOTO1700
1680 Time=Time+T1 MOD128
1690 DRAW Time,Amp*YScale
1700 UNTIL Amp=0
1710 ENDPROC
1720
1730 DEF PROCTimeCheck
1740 OverTime=FALSE
1750 IF Time>Duration*5 Time=Duration*5:OverTime=TRUE
1760 ENDPROC
1770
1780 DEF PROCPrint(Phase$,Oset1,Oset2) 
1790 IF Phase$="R" GOTO1860
1800 VDU5
1810 MOVE Time+Oset1,Amp*YScale+Oset2 
1820 PRINTPhase$
1830 MOVE Time,Amp*YScale
1840 VDU4
1850 IF Phase$="r" ENDPROC
1860 PRINTPhase$;"=";Time/100;" ";
1870 ENDPROC

### How to use the program

10 REM PROGRAM 5.1A
20 REM Function Key SetUp for
30 REM ADSR Graph Generator
40
50 REM CLEAR
60 *KEY0 C
70 REM T
80 *KEY1 1
90 REM AA
100 *KEY2 2
110 REM AD
120 *KEY3 3
130 REM AS
140 *KEY4 4
150 REM AR
160 *KEY5 5
170 REM ALA
180 *KEY6 6
190 REM ALD
200 *KEY7 7
210 REM Duration 
220 *KEY8 8
230 REM SOUND 
240 *KEY9 " "

#### Renumbered PROCFnKeys and additional line 65 to call the PROC

65 PROCFnkeys
3000 DEF PROCFnkeys 
3010 REM ADDITIONAL PROC TO PROG 5.1
3020 REM BEEN RENUMBERED
3040 REM PROGRAM 5.1A
3050 REM Function Key SetUp for
3060 REM ADSR Graph Generator
3070
3080 REM CLEAR
3090 *KEY0 C
3100 REM T
3110 *KEY1 1
3120 REM AA
3130 *KEY2 2
3140 REM AD
3150 *KEY3 3
3160 REM AS
3170 *KEY4 4
3180 REM AR
3190 *KEY5 5
3200 REM ALA
3210 *KEY6 6
3220 REM ALD
3230 *KEY7 7
3240 REM Duration 
3250 *KEY8 8
3260 REM SOUND 
3270 *KEY9 " "
3280 ENDPROC

### The Pitch Graph Generator program

9 REM PROGRAM 5.2 (Combined)
10 REM PROGRAM 5.1
19 REM ADSR & PITCH Graph Generator
20 REM ADSR Graph Generator
24 REM Added Line Numbers are not
25 REM Multiples of 10 and are+
26 REM 75,145,762,764,855,1242,1244
27 REM Plus 2000 to 2670
29 REM Altered Lines=150,810
35
75 PROCAxis2
145 IF Input$>="!" AND Input$<="'" Input=ASC(Input$):PROCPitEnv
762 pi1=3:pi2=3:pi3=3
764 pn1=3:pn2=3:pn3=3:p=3
810 COLOURb:PRINT;",";:COLOURpi1:PRINT;PI1;:COLOURb:PRINT;",";:COLOURpi2:PRINT;PI2;:COLOURb:PRINT;",";:COLOURpi3:PRINT;PI3;:COLOURb:PRINT;",";:COLOURpn1:PRINT;PN1;:COLOURb:PRINT;",";:COLOURpn2:PRINT;PN2;:COLOURb:PRINT;",";:COLOURpn3:PRINT;PN3;:COLOURb:PRINT;",";
855 COLOURp:PRINTTAB(23,1)SPC(6)TAB(18 ,1)"Pitch=";Pit1:COLOURb
1242 FinalTime=Time
1244 PROCPitchEnv
2000 DEF PROCAxis2
2010 YScale=3
2020 VDU29,0;0;
2030 VDU5
2040 FOR Mark%=60 TO 780 STEP YScale*10
2050 MOVE40,Mark%+YScale*10:PRINT"-"
2060 NEXT Mark%
2070 VDU4
2080 VDU29,50;50;
2090 ENDPROC
2100
2110 DEF PROCP(pi,pn)
2120 FOR P%=1 TO pn
2130 Pitch=Pitch+pi
2140 IF Pitch>255 Pitch=Pitch MOD256
2150 IF Pitch<0 Pitch=Pitch+256
2160 DRAW Time,Pitch*YScale
2170 Time=Time+T1 MOD128
2180 PROCFinalTimeCheck:IF FTime P%=pn
2190 DRAW Time,Pitch*YScale
2200 NEXT P%
2210 ENDPROC
2220
2230 DEF PROCPitEnv
2240 PROCReset
2250 IF Input=33 pi1=1
2260 IF Input=34 pi2=1
2270 IF Input=35 pi3=1
2280 IF Input=36 pn1=1
2290 IF Input=37 pn2=1
2300 IF Input=38 pn3=1
2310 IF Input=39 pn3=1
2320 PROCPrintEnv
2330 PROCAlterPit
2340 PROCPrintEnv
2350 ENDPROC

#### Adjusting line 810 for "P."

810 COLOURb:P.;",";:COLOURpi1:P.;PI1;:COLOURb:P.;",";:COLOURpi2:P.;PI2;:COLOURb:P.;",";:COLOURpi3:P.;PI3;:COLOURb:P.;",";:COLOURpn1:P.;PN1;:COLOURb:P.;",";:COLOURpn2:P.;PN2;:COLOURb:P.;",";:COLOURpn3:P.;PN3;:COLOURb:P.;",";


#### Corrected 5.2 with P.

9 REM PROGRAM 5.2 (Combined)
10 REM PROGRAM 5.1
19 REM ADSR & PITCH Graph Generator
20 REM ADSR Graph Generator
24 REM Added Line Numbers are not
25 REM Multiples of 10 and are+
26 REM 75,145,762,764,855,1242,1244
27 REM Plus 2000 to 2670
29 REM Altered Lines=150,810
35
75 PROCAxis2
145 IF Input$>="!" AND Input$<="'" Input=ASC(Input$):PROCPitEnv
762 pi1=3:pi2=3:pi3=3
764 pn1=3:pn2=3:pn3=3:p=3
810 COLOURb:P.;",";:COLOURpi1:P.;PI1;:COLOURb:P.;",";:COLOURpi2:P.;PI2;:COLOURb:P.;",";:COLOURpi3:P.;PI3;:COLOURb:P.;",";:COLOURpn1:P.;PN1;:COLOURb:P.;",";:COLOURpn2:P.;PN2;:COLOURb:P.;",";:COLOURpn3:P.;PN3;:COLOURb:P.;",";
855 COLOURp:PRINTTAB(23,1)SPC(6)TAB(18 ,1)"Pitch=";Pit1:COLOURb
1242 FinalTime=Time
1244 PROCPitchEnv
2000 DEF PROCAxis2
2010 YScale=3
2020 VDU29,0;0;
2030 VDU5
2040 FOR Mark%=60 TO 780 STEP YScale*10
2050 MOVE40,Mark%+YScale*10:PRINT"-"
2060 NEXT Mark%
2070 VDU4
2080 VDU29,50;50;
2090 ENDPROC
2100
2110 DEF PROCP(pi,pn)
2120 FOR P%=1 TO pn
2130 Pitch=Pitch+pi
2140 IF Pitch>255 Pitch=Pitch MOD256
2150 IF Pitch<0 Pitch=Pitch+256
2160 DRAW Time,Pitch*YScale
2170 Time=Time+T1 MOD128
2180 PROCFinalTimeCheck:IF FTime P%=pn
2190 DRAW Time,Pitch*YScale
2200 NEXT P%
2210 ENDPROC
2220
2230 DEF PROCPitEnv
2240 PROCReset
2250 IF Input=33 pi1=1
2260 IF Input=34 pi2=1
2270 IF Input=35 pi3=1
2280 IF Input=36 pn1=1
2290 IF Input=37 pn2=1
2300 IF Input=38 pn3=1
2310 IF Input=39 pn3=1
2320 PROCPrintEnv
2330 PROCAlterPit
2340 PROCPrintEnv
2350 ENDPROC

#### Errata in Listing 5.2

##### Missing changed line 150 (only in OCR scan PDF)

The listing shows in line 29

29 REM Altered Lines=150,810

However, whilst 810 is indeed altered, the new version of line 150 is not shown. This line should be:

150 IF Input$="C" PROCAxis:PROCAxis2

##### Typo in line 2310 (only in OCR scan PDF)

Also, line 2310 is incorrect as its action is a repeat of 2300. To affect the pitch colour (p), it should be 

2310 IF Input=39 p=1

##### Missing lines due to truncated listing

Note that the listing is truncated and ends at line 2350. 

There are three PROCs missing: PROCAlterPit, PROCFinalTimeCheck and PROCOvertime.

##### The missing lines 2360-2670 of listing 5.2

2360
2370 DEF PROCAlterPit
2380 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
2390 IF NewVal$=“” PROCReset: PROCPrintEnv:ENDPROC
2400 NewVal=EVAL(NewVal$)
2410 PRINTTAB(30,0)SPC(20)
2420 ON (Input-32) GOTO 2430,2440,2450,2460,2470,2480
2430 PI1=NewVal:ENDPROC
2440 PI2=NewVal:ENDPROC
2450 PI3=NewVal:ENDPROC
2460 PN1=NewVal:ENDPROC
2470 PN2=NewVal:ENDPROC
2480 PN3=NewVal:ENDPROC
2490 ENDPROC
2500
2510 DEF PROCPitchEnv
2520 Time=0
2530 YScale=3
2540 MOVE 0,Pitch*YScale
2550 REPEAT
2560 Pitch=Pit1
2570 PROCP(PI1, PN1)
2580 PROCP(PI2, PN2)
2590 PROCP(PI3, PN3)
2600 UNTIL FTime OR T1>127
2610 ENDPROC
2620 
2630 DEF PROCFinalTimeCheck
2640 FTime=FALSE
2650 IF Time>Duration*5 Time=Duration*5:FTime=TRUE
2660 ENDPROC
2670 

##### Add ability to change the value of Pitch variable

Finally, to fix the ON x GOTO range error and actually be able to change the value of Pitch, change line 2420 to add a seventh line option

2420 ON (Input-32) GOTO 2430,2440,2450,2460,2470,2480,2485

and then add a new line to change the Pitch variable (actually you have to change Pit1)

2485 Pitch=NewVal:ENDPROC

actually

2485 Pit1=NewVal:ENDPROC

##### The complete patches (additional to the listing 5.2 in the book, and the missing lines)

150 IF Input$="C" PROCAxis:PROCAxis2
2310 IF Input=39 p=1
2420 ON (Input-32) GOTO 2430,2440,2450,2460,2470,2480,2485
2485 Pit1=NewVal:ENDPROC

#### Completely corrected 5.2 with P., missing lines and patches

9 REM PROGRAM 5.2 (Combined)
10 REM PROGRAM 5.1
19 REM ADSR & PITCH Graph Generator
20 REM ADSR Graph Generator
24 REM Added Line Numbers are not
25 REM Multiples of 10 and are+
26 REM 75,145,762,764,855,1242,1244
27 REM Plus 2000 to 2670
29 REM Altered Lines=150,810
35
75 PROCAxis2
145 IF Input$>="!" AND Input$<="'" Input=ASC(Input$):PROCPitEnv
150 IF Input$="C" PROCAxis:PROCAxis2
762 pi1=3:pi2=3:pi3=3
764 pn1=3:pn2=3:pn3=3:p=3
810 COLOURb:P.;",";:COLOURpi1:P.;PI1;:COLOURb:P.;",";:COLOURpi2:P.;PI2;:COLOURb:P.;",";:COLOURpi3:P.;PI3;:COLOURb:P.;",";:COLOURpn1:P.;PN1;:COLOURb:P.;",";:COLOURpn2:P.;PN2;:COLOURb:P.;",";:COLOURpn3:P.;PN3;:COLOURb:P.;",";
855 COLOURp:PRINTTAB(23,1)SPC(6)TAB(18 ,1)"Pitch=";Pit1:COLOURb
1242 FinalTime=Time
1244 PROCPitchEnv
2000 DEF PROCAxis2
2010 YScale=3
2020 VDU29,0;0;
2030 VDU5
2040 FOR Mark%=60 TO 780 STEP YScale*10
2050 MOVE40,Mark%+YScale*10:PRINT"-"
2060 NEXT Mark%
2070 VDU4
2080 VDU29,50;50;
2090 ENDPROC
2100
2110 DEF PROCP(pi,pn)
2120 FOR P%=1 TO pn
2130 Pitch=Pitch+pi
2140 IF Pitch>255 Pitch=Pitch MOD256
2150 IF Pitch<0 Pitch=Pitch+256
2160 DRAW Time,Pitch*YScale
2170 Time=Time+T1 MOD128
2180 PROCFinalTimeCheck:IF FTime P%=pn
2190 DRAW Time,Pitch*YScale
2200 NEXT P%
2210 ENDPROC
2220
2230 DEF PROCPitEnv
2240 PROCReset
2250 IF Input=33 pi1=1
2260 IF Input=34 pi2=1
2270 IF Input=35 pi3=1
2280 IF Input=36 pn1=1
2290 IF Input=37 pn2=1
2300 IF Input=38 pn3=1
2310 IF Input=39 p=1
2320 PROCPrintEnv
2330 PROCAlterPit
2340 PROCPrintEnv
2350 ENDPROC
2360
2370 DEF PROCAlterPit
2380 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
2390 IF NewVal$=“” PROCReset: PROCPrintEnv:ENDPROC
2400 NewVal=EVAL(NewVal$)
2410 PRINTTAB(30,0)SPC(20)
2420 ON (Input-32) GOTO 2430,2440,2450,2460,2470,2480,2485
2430 PI1=NewVal:ENDPROC
2440 PI2=NewVal:ENDPROC
2450 PI3=NewVal:ENDPROC
2460 PN1=NewVal:ENDPROC
2470 PN2=NewVal:ENDPROC
2480 PN3=NewVal:ENDPROC
2485 Pit1=NewVal:ENDPROC
2490 ENDPROC
2500
2510 DEF PROCPitchEnv
2520 Time=0
2530 YScale=3
2540 MOVE 0,Pitch*YScale
2550 REPEAT
2560 Pitch=Pit1
2570 PROCP(PI1, PN1)
2580 PROCP(PI2, PN2)
2590 PROCP(PI3, PN3)
2600 UNTIL FTime OR T1>127
2610 ENDPROC
2620 
2630 DEF PROCFinalTimeCheck
2640 FTime=FALSE
2650 IF Time>Duration*5 Time=Duration*5:FTime=TRUE
2660 ENDPROC
2670 

#### Combining 5.1 and 5.2

##### This has had the missing lines (2360-2670) added and the patches for lines 150, 2310, 2420, 2485


9 REM PROGRAM 5.2 (Combined)
10 REM PROGRAM 5.1
19 REM ADSR & PITCH Graph Generator
20 REM ADSR Graph Generator
24 REM Added Line Numbers are not
25 REM Multiples of 10 and are+
26 REM 75,145,762,764,855,1242,1244
27 REM Plus 2000 to 2670
29 REM Altered Lines=150,810
30
35
40 *TV255,1
50 MODE1
60 PROCSetUp
70 PROCAxis
75 PROCAxis2
80 Input$="":PROCReset:PROCPrintEnv
90
100 REPEAT
110 *FX15,1
120 Input$=GET$
130 IF Input$=" " PROCSound
140 IF Input$>="1" AND Input$<="8" PROCEnv
145 IF Input$>="!" AND Input$<="'" Input=ASC(Input$):PROCPitEnv
150 IF Input$="C" PROCAxis:PROCAxis2
160 UNTIL Input$="Q"
170 END
180
190 DEF PROCSetUp
200 REM Set Text Window
210 VDU28,0,4,39,0
220 REM Set Graphics Window
230 VDU24,0;0;1279;860;
240 REM Background=Yellow
250 GCOL0,130:CLG
260 REM Foreground=Black
270 GCOL0,0
280 REM Set COLOUR 1 to Flashing 
290 VDU19,1,9,0,0,0
300
310 REM Set Initial Parameters
320 PI1=0:PI2=0:PI3=0
330 PN1=0:PN2=0:PN3=0
340 T=20:T1=T:Pitch=10:Pit1=Pitch
350 AA=126:AD=-4:AS=-1:AR=-6
360 ALA=126:ALD=80:Duration=80
370 REM Marker for X Axis
380 VDU23,224,128,128,128,128,128,128,128,128
390 ENDPROC
400
410 DEF PROCAxis
420 YScale=6
430 CLG
440 VDU29,0;0;
450 MOVE50,0:DRAW50,860
460 MOVE0,50:DRAW1279,50
470 VDU5
480 FOR Mark%=0 TO 780 STEP YScale*10
490 MOVE20,Mark%+YScale*10:PRINT"-" 
500 NEXT Mark%
510 FOR Mark%=50 TO 1250 STEP 100
520 MOVEMark%,50:PRINTCHR$224
530 NEXT Mark%
540 VDU 4
550 REM Set Graphics Origin
560 VDU29,50;50;
570 ENDPROC
580
590 DEF PROCEnv
600 PROCReset
610 IF Input$="1" t=1
620 IF Input$="2" aa=1
630 IF Input$="3" ad=1
640 IF Input$="4" as=1
650 IF Input$="5" ar=1
660 IF Input$="6" ala=1
670 IF Input$="7" ald=1
680 IF Input$="8" dur=1
690 PROCPrintEnv
700 PROCAlter
710 PROCPrintEnv
720 ENDPROC
730
740 DEF PROCReset
750 b=3:t=3:aa=3:ad=3:as=3:ar=3
760 ala=3:ald=3:dur=3
762 pi1=3:pi2=3:pi3=3
764 pn1=3:pn2=3:pn3=3:p=3
770 ENDPROC
780
790 DEF PROCPrintEnv
800 COLOURb:PRINTTAB(0,0)"ENV1,";:COLOURt:PRINT;T;
810 COLOURb:P.;",";:COLOURpi1:P.;PI1;:COLOURb:P.;",";:COLOURpi2:P.;PI2;:COLOURb:P.;",";:COLOURpi3:P.;PI3;:COLOURb:P.;",";:COLOURpn1:P.;PN1;:COLOURb:P.;",";:COLOURpn2:P.;PN2;:COLOURb:P.;",";:COLOURpn3:P.;PN3;:COLOURb:P.;",";
820 COLOURaa:PRINT;AA;:COLOURb:PRINT;",";:COLOURad:PRINT;AD;:COLOURb:PRINT;",";
830 COLOURas:PRINT;AS;:COLOURb:PRINT;",";:COLOURar:PRINT;AR;:COLOURb:PRINT","; 
840 COLOURala:PRINT;ALA;:COLOURb:PRINT;",";:COLOURald:PRINT;ALD:COLOURb
850 COLOURdur:PRINTTAB(14,1)SPC(4)TAB(10,1)"Dur=";Duration:COLOURb
855 COLOURp:PRINTTAB(23,1)SPC(6)TAB(18 ,1)"Pitch=";Pit1:COLOURb
860 ENDPROC
870
880 DEF PROCAlter
890 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
900 IF NewVal$="" PROCReset:PROCPrintEnv:ENDPROC
910 NewVal=EVAL(NewVal$)
920 PRINTTAB(30,0)SPC(20)
930 ON EVAL(Input$) GOTO940,950,960,970,980,990,1000,1010
940 T=NewVal:T1=T:ENDPROC
950 AA=NewVal:ENDPROC
960 AD=NewVal:ENDPROC
970 AS=NewVal:ENDPROC
980 AR=NewVal:ENDPROC
990 ALA=NewVal:ENDPROC
1000 ALD=NewVal:ENDPROC
1010 Duration=NewVal:ENDPROC
1020
1030 DEF PROCSound
1040 ENVELOPE1,T,PI1,PI2,PI3,PN1,PN2,PN3,AA,AD,AS,AR,ALA,ALD
1050 SOUND1,1,Pit1,Duration
1060 REM Clear Last Timing Results
1070 PRINTTAB(0,4)SPC(39);:PRINTTAB(0,4);
1080 IF T=0 T1=1
1090 IF T=128MT1=129
1100 Time=0:Amp=0
1110 MOVE0,0
1120 YScale=6
1130 PROCAttack
1140 PROCPrint("A",8,32)
1150 IF OverTime GOTO 1210
1160 PROCDecay
1170 PROCPrint("D",8,32)
1180 IF OverTime GOTO 1210
1190 PROCSustain
1200 PROCPrint("S",8,32)
1210 PROCPrint("r",40,16)
1220 PROCRelease
1230 PROCPrint("R",0,0)
1240 PRINT;"Secs";
1242 FinalTime=Time
1244 PROCPitchEnv
1250 ENDPROC
1260
1270 DEF PROCAttack
1280 REPEAT
1290 Amp=Amp+AA
1300 IF Amp>ALA Amp=ALA
1310 DRAW Time,Amp*YScale
1320 Time=Time+T1 MOD128
1330 PROCTimeCheck:IF OverTime GOTO1350
1340 DRAW Time,Amp*YScale
1350 UNTIL OverTime OR Amp=ALA
1360 ENDPROC
1370
1380 DEF PROCDecay
1390 REPEAT
1400 Amp=Amp+AD
1410 IF ALD<ALA:IF Amp<ALD Amp=ALD
1420 IF ALD>ALA:IF Amp>ALD Amp=ALD
1430 IF ALD=ALA Amp=ALD
1440 DRAW Time,Amp*YScale
1450 Time=Time+T1 MOD128
1460 PROCTimeCheck:IF OverTime GOTO1480
1470 DRAW Time,Amp*YScale
1480 UNTIL OverTime OR Amp=ALD
1490 ENDPROC
1500
1510 DEF PROCSustain
1520 REPEAT
1530 Amp=Amp+AS
1540 IF Amp<0 Amp=0
1550 DRAW Time,Amp*YScale
1560 Time=Time+T1 MOD128
1570 PROCTimeCheck:IF OverTime GOTO1590
1580 DRAW Time,Amp*YScale
1590 UNTIL OverTime OR Amp=0
1600 ENDPROC
1610
1620 DEF PROCRelease
1630 REPEAT
1640 Amp=Amp+AR
1650 IF Amp<0 Amp=0
1660 DRAW Time,Amp*YScale
1670 IF Amp=0 GOTO1700
1680 Time=Time+T1 MOD128
1690 DRAW Time,Amp*YScale
1700 UNTIL Amp=0
1710 ENDPROC
1720
1730 DEF PROCTimeCheck
1740 OverTime=FALSE
1750 IF Time>Duration*5 Time=Duration*5:OverTime=TRUE
1760 ENDPROC
1770
1780 DEF PROCPrint(Phase$,Oset1,Oset2) 
1790 IF Phase$="R" GOTO1860
1800 VDU5
1810 MOVE Time+Oset1,Amp*YScale+Oset2 
1820 PRINTPhase$
1830 MOVE Time,Amp*YScale
1840 VDU4
1850 IF Phase$="r" ENDPROC
1860 PRINTPhase$;"=";Time/100;" ";
1870 ENDPROC
2000 DEF PROCAxis2
2010 YScale=3
2020 VDU29,0;0;
2030 VDU5
2040 FOR Mark%=60 TO 780 STEP YScale*10
2050 MOVE40,Mark%+YScale*10:PRINT"-"
2060 NEXT Mark%
2070 VDU4
2080 VDU29,50;50;
2090 ENDPROC
2100
2110 DEF PROCP(pi,pn)
2120 FOR P%=1 TO pn
2130 Pitch=Pitch+pi
2140 IF Pitch>255 Pitch=Pitch MOD256
2150 IF Pitch<0 Pitch=Pitch+256
2160 DRAW Time,Pitch*YScale
2170 Time=Time+T1 MOD128
2180 PROCFinalTimeCheck:IF FTime P%=pn
2190 DRAW Time,Pitch*YScale
2200 NEXT P%
2210 ENDPROC
2220
2230 DEF PROCPitEnv
2240 PROCReset
2250 IF Input=33 pi1=1
2260 IF Input=34 pi2=1
2270 IF Input=35 pi3=1
2280 IF Input=36 pn1=1
2290 IF Input=37 pn2=1
2300 IF Input=38 pn3=1
2310 IF Input=39 p=1
2320 PROCPrintEnv
2330 PROCAlterPit
2340 PROCPrintEnv
2350 ENDPROC
2360
2370 DEF PROCAlterPit
2380 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
2390 IF NewVal$=“” PROCReset: PROCPrintEnv:ENDPROC
2400 NewVal=EVAL(NewVal$)
2410 PRINTTAB(30,0)SPC(20)
2420 ON (Input-32) GOTO 2430,2440,2450,2460,2470,2480,2485
2430 PI1=NewVal:ENDPROC
2440 PI2=NewVal:ENDPROC
2450 PI3=NewVal:ENDPROC
2460 PN1=NewVal:ENDPROC
2470 PN2=NewVal:ENDPROC
2480 PN3=NewVal:ENDPROC
2485 Pit1=NewVal:ENDPROC
2490 ENDPROC
2500
2510 DEF PROCPitchEnv
2520 Time=0
2530 YScale=3
2540 MOVE 0,Pitch*YScale
2550 REPEAT
2560 Pitch=Pit1
2570 PROCP(PI1, PN1)
2580 PROCP(PI2, PN2)
2590 PROCP(PI3, PN3)
2600 UNTIL FTime OR T1>127
2610 ENDPROC
2620 
2630 DEF PROCFinalTimeCheck
2640 FTime=FALSE
2650 IF Time>Duration*5 Time=Duration*5:FTime=TRUE
2660 ENDPROC
2670 


#### Combining 5.1 and 5.2 with Fx keys

##### This has had the missing lines (2360-2670) added and the patches for lines 150, 2310, 2420, 2485

9 REM PROGRAM 5.2 (Combined)
10 REM PROGRAM 5.1
19 REM ADSR & PITCH Graph Generator
20 REM ADSR Graph Generator
24 REM Added Line Numbers are not
25 REM Multiples of 10 and are+
26 REM 75,145,762,764,855,1242,1244
27 REM Plus 2000 to 2670
29 REM Altered Lines=150,810
30
35
40 *TV255,1
50 MODE1
60 PROCSetUp
65 PROCFnkeys
70 PROCAxis
75 PROCAxis2
80 Input$="":PROCReset:PROCPrintEnv
90
100 REPEAT
110 *FX15,1
120 Input$=GET$
130 IF Input$=" " PROCSound
140 IF Input$>="1" AND Input$<="8" PROCEnv
145 IF Input$>="!" AND Input$<="'" Input=ASC(Input$):PROCPitEnv
150 IF Input$="C" PROCAxis:PROCAxis2
160 UNTIL Input$="Q"
170 END
180
190 DEF PROCSetUp
200 REM Set Text Window
210 VDU28,0,4,39,0
220 REM Set Graphics Window
230 VDU24,0;0;1279;860;
240 REM Background=Yellow
250 GCOL0,130:CLG
260 REM Foreground=Black
270 GCOL0,0
280 REM Set COLOUR 1 to Flashing 
290 VDU19,1,9,0,0,0
300
310 REM Set Initial Parameters
320 PI1=0:PI2=0:PI3=0
330 PN1=0:PN2=0:PN3=0
340 T=20:T1=T:Pitch=10:Pit1=Pitch
350 AA=126:AD=-4:AS=-1:AR=-6
360 ALA=126:ALD=80:Duration=80
370 REM Marker for X Axis
380 VDU23,224,128,128,128,128,128,128,128,128
390 ENDPROC
400
410 DEF PROCAxis
420 YScale=6
430 CLG
440 VDU29,0;0;
450 MOVE50,0:DRAW50,860
460 MOVE0,50:DRAW1279,50
470 VDU5
480 FOR Mark%=0 TO 780 STEP YScale*10
490 MOVE20,Mark%+YScale*10:PRINT"-" 
500 NEXT Mark%
510 FOR Mark%=50 TO 1250 STEP 100
520 MOVEMark%,50:PRINTCHR$224
530 NEXT Mark%
540 VDU 4
550 REM Set Graphics Origin
560 VDU29,50;50;
570 ENDPROC
580
590 DEF PROCEnv
600 PROCReset
610 IF Input$="1" t=1
620 IF Input$="2" aa=1
630 IF Input$="3" ad=1
640 IF Input$="4" as=1
650 IF Input$="5" ar=1
660 IF Input$="6" ala=1
670 IF Input$="7" ald=1
680 IF Input$="8" dur=1
690 PROCPrintEnv
700 PROCAlter
710 PROCPrintEnv
720 ENDPROC
730
740 DEF PROCReset
750 b=3:t=3:aa=3:ad=3:as=3:ar=3
760 ala=3:ald=3:dur=3
762 pi1=3:pi2=3:pi3=3
764 pn1=3:pn2=3:pn3=3:p=3
770 ENDPROC
780
790 DEF PROCPrintEnv
800 COLOURb:PRINTTAB(0,0)"ENV1,";:COLOURt:PRINT;T;
810 COLOURb:P.;",";:COLOURpi1:P.;PI1;:COLOURb:P.;",";:COLOURpi2:P.;PI2;:COLOURb:P.;",";:COLOURpi3:P.;PI3;:COLOURb:P.;",";:COLOURpn1:P.;PN1;:COLOURb:P.;",";:COLOURpn2:P.;PN2;:COLOURb:P.;",";:COLOURpn3:P.;PN3;:COLOURb:P.;",";
820 COLOURaa:PRINT;AA;:COLOURb:PRINT;",";:COLOURad:PRINT;AD;:COLOURb:PRINT;",";
830 COLOURas:PRINT;AS;:COLOURb:PRINT;",";:COLOURar:PRINT;AR;:COLOURb:PRINT","; 
840 COLOURala:PRINT;ALA;:COLOURb:PRINT;",";:COLOURald:PRINT;ALD:COLOURb
850 COLOURdur:PRINTTAB(14,1)SPC(4)TAB(10,1)"Dur=";Duration:COLOURb
855 COLOURp:PRINTTAB(23,1)SPC(6)TAB(18 ,1)"Pitch=";Pit1:COLOURb
860 ENDPROC
870
880 DEF PROCAlter
890 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
900 IF NewVal$="" PROCReset:PROCPrintEnv:ENDPROC
910 NewVal=EVAL(NewVal$)
920 PRINTTAB(30,0)SPC(20)
930 ON EVAL(Input$) GOTO940,950,960,970,980,990,1000,1010
940 T=NewVal:T1=T:ENDPROC
950 AA=NewVal:ENDPROC
960 AD=NewVal:ENDPROC
970 AS=NewVal:ENDPROC
980 AR=NewVal:ENDPROC
990 ALA=NewVal:ENDPROC
1000 ALD=NewVal:ENDPROC
1010 Duration=NewVal:ENDPROC
1020
1030 DEF PROCSound
1040 ENVELOPE1,T,PI1,PI2,PI3,PN1,PN2,PN3,AA,AD,AS,AR,ALA,ALD
1050 SOUND1,1,Pit1,Duration
1060 REM Clear Last Timing Results
1070 PRINTTAB(0,4)SPC(39);:PRINTTAB(0,4);
1080 IF T=0 T1=1
1090 IF T=128MT1=129
1100 Time=0:Amp=0
1110 MOVE0,0
1120 YScale=6
1130 PROCAttack
1140 PROCPrint("A",8,32)
1150 IF OverTime GOTO 1210
1160 PROCDecay
1170 PROCPrint("D",8,32)
1180 IF OverTime GOTO 1210
1190 PROCSustain
1200 PROCPrint("S",8,32)
1210 PROCPrint("r",40,16)
1220 PROCRelease
1230 PROCPrint("R",0,0)
1240 PRINT;"Secs";
1242 FinalTime=Time
1244 PROCPitchEnv
1250 ENDPROC
1260
1270 DEF PROCAttack
1280 REPEAT
1290 Amp=Amp+AA
1300 IF Amp>ALA Amp=ALA
1310 DRAW Time,Amp*YScale
1320 Time=Time+T1 MOD128
1330 PROCTimeCheck:IF OverTime GOTO1350
1340 DRAW Time,Amp*YScale
1350 UNTIL OverTime OR Amp=ALA
1360 ENDPROC
1370
1380 DEF PROCDecay
1390 REPEAT
1400 Amp=Amp+AD
1410 IF ALD<ALA:IF Amp<ALD Amp=ALD
1420 IF ALD>ALA:IF Amp>ALD Amp=ALD
1430 IF ALD=ALA Amp=ALD
1440 DRAW Time,Amp*YScale
1450 Time=Time+T1 MOD128
1460 PROCTimeCheck:IF OverTime GOTO1480
1470 DRAW Time,Amp*YScale
1480 UNTIL OverTime OR Amp=ALD
1490 ENDPROC
1500
1510 DEF PROCSustain
1520 REPEAT
1530 Amp=Amp+AS
1540 IF Amp<0 Amp=0
1550 DRAW Time,Amp*YScale
1560 Time=Time+T1 MOD128
1570 PROCTimeCheck:IF OverTime GOTO1590
1580 DRAW Time,Amp*YScale
1590 UNTIL OverTime OR Amp=0
1600 ENDPROC
1610
1620 DEF PROCRelease
1630 REPEAT
1640 Amp=Amp+AR
1650 IF Amp<0 Amp=0
1660 DRAW Time,Amp*YScale
1670 IF Amp=0 GOTO1700
1680 Time=Time+T1 MOD128
1690 DRAW Time,Amp*YScale
1700 UNTIL Amp=0
1710 ENDPROC
1720
1730 DEF PROCTimeCheck
1740 OverTime=FALSE
1750 IF Time>Duration*5 Time=Duration*5:OverTime=TRUE
1760 ENDPROC
1770
1780 DEF PROCPrint(Phase$,Oset1,Oset2) 
1790 IF Phase$="R" GOTO1860
1800 VDU5
1810 MOVE Time+Oset1,Amp*YScale+Oset2 
1820 PRINTPhase$
1830 MOVE Time,Amp*YScale
1840 VDU4
1850 IF Phase$="r" ENDPROC
1860 PRINTPhase$;"=";Time/100;" ";
1870 ENDPROC
1880
2000 DEF PROCAxis2
2010 YScale=3
2020 VDU29,0;0;
2030 VDU5
2040 FOR Mark%=60 TO 780 STEP YScale*10
2050 MOVE40,Mark%+YScale*10:PRINT"-"
2060 NEXT Mark%
2070 VDU4
2080 VDU29,50;50;
2090 ENDPROC
2100
2110 DEF PROCP(pi,pn)
2120 FOR P%=1 TO pn
2130 Pitch=Pitch+pi
2140 IF Pitch>255 Pitch=Pitch MOD256
2150 IF Pitch<0 Pitch=Pitch+256
2160 DRAW Time,Pitch*YScale
2170 Time=Time+T1 MOD128
2180 PROCFinalTimeCheck:IF FTime P%=pn
2190 DRAW Time,Pitch*YScale
2200 NEXT P%
2210 ENDPROC
2220
2230 DEF PROCPitEnv
2240 PROCReset
2250 IF Input=33 pi1=1
2260 IF Input=34 pi2=1
2270 IF Input=35 pi3=1
2280 IF Input=36 pn1=1
2290 IF Input=37 pn2=1
2300 IF Input=38 pn3=1
2310 IF Input=39 p=1
2320 PROCPrintEnv
2330 PROCAlterPit
2340 PROCPrintEnv
2350 ENDPROC
2360
2370 DEF PROCAlterPit
2380 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
2390 IF NewVal$=“” PROCReset: PROCPrintEnv:ENDPROC
2400 NewVal=EVAL(NewVal$)
2410 PRINTTAB(30,0)SPC(20)
2420 ON (Input-32) GOTO 2430,2440,2450,2460,2470,2480,2485
2430 PI1=NewVal:ENDPROC
2440 PI2=NewVal:ENDPROC
2450 PI3=NewVal:ENDPROC
2460 PN1=NewVal:ENDPROC
2470 PN2=NewVal:ENDPROC
2480 PN3=NewVal:ENDPROC
2485 Pit1=NewVal:ENDPROC
2490 ENDPROC
2500
2510 DEF PROCPitchEnv
2520 Time=0
2530 YScale=3
2540 MOVE 0,Pitch*YScale
2550 REPEAT
2560 Pitch=Pit1
2570 PROCP(PI1, PN1)
2580 PROCP(PI2, PN2)
2590 PROCP(PI3, PN3)
2600 UNTIL FTime OR T1>127
2610 ENDPROC
2620 
2630 DEF PROCFinalTimeCheck
2640 FTime=FALSE
2650 IF Time>Duration*5 Time=Duration*5:FTime=TRUE
2660 ENDPROC
2670 
3000 DEF PROCFnkeys 
3010 REM ADDITIONAL PROC TO PROG 5.1
3020 REM BEEN RENUMBERED
3040 REM PROGRAM 5.1A
3050 REM Function Key SetUp for
3060 REM ADSR Graph Generator
3070
3080 REM CLEAR
3090 *KEY0 C
3100 REM T
3110 *KEY1 1
3120 REM AA
3130 *KEY2 2
3140 REM AD
3150 *KEY3 3
3160 REM AS
3170 *KEY4 4
3180 REM AR
3190 *KEY5 5
3200 REM ALA
3210 *KEY6 6
3220 REM ALD
3230 *KEY7 7
3240 REM Duration 
3250 *KEY8 8
3260 REM SOUND 
3270 *KEY9 " "
3280 ENDPROC


#### Estimate DEF PROCAlterPit, DEF PROCFinalTimeCheck and DEF PROCOvertime  (redundant now as the missing lines have been found)

4870 
4880 DEF PROCAlterPit
4890 INPUT NewVal$:PRINTTAB(0,2)SPC(6)
4900 IF NewVal$="" PROCReset:PROCPrintEnv:ENDPROC
4910 NewVal=EVAL(NewVal$)
4920 PRINTTAB(30,0)SPC(20)
4930 ON EVAL(Input$) GOTO940,950,960,970,980,990,1000,1010
4940 T=NewVal:T1=T:ENDPROC
4950 AA=NewVal:ENDPROC
4960 AD=NewVal:ENDPROC
4970 AS=NewVal:ENDPROC
4980 AR=NewVal:ENDPROC
4990 ALA=NewVal:ENDPROC
5000 ALD=NewVal:ENDPROC
5010 Duration=NewVal:ENDPROC
5020


#### Clues to the missing lines (redundant now as the missing lines have been found)

- Note the change of YScale in line 2010 and 2520 during the drawing of the pitch graph
- PROCPitEnv serves the same purpose as PROCEnv, and PROCAlterPit is similar to PROCAlter.
- Like T, Pitch has an assistant in Pit1, so whatever value the pitch actually reaches during the envelope execution, the program knows the original pitch value. See lines 2490, 2530, 2580 and the original 340.
The drawing is done by PROCP which is the same for all three PI/PN pairs and is called with the three sets of parameters by PROCPitchEnv. In line 2590, if T is greater than 127, ie the envelope is set not to repeat, the pitch envelope is only drawn once.
- The total duration of the sound after the ADSR graph has been drawn is put into FinalTime as the pitch envelope will continue until the release phase completes. PROCFinalTimeCheck performs a similar function to PROCOverTime.

So,
- Lines 2490-2590  are referred to in the text description




### Apparent peculiarities of the pitch envelope

10 ENVELOPE1,20,4,0,0,1,0,0,126,-1,0,-6,126,80
20 SOUND1,1,101,80
It is the same as this:
10 ENVELOPE1,20,4,0,0,1,0,1,126,-1,0,-6,126,80
20 SOUND1,1,101,80
The value of PI1, 4, takes the pitch up a semitone and it stays there. One might expect the same result to follow from this:
10 ENVELOPE1,20,0,0,4,0,0,1,126,- 1,0,-6,126,80
20 SOUND1,1,101,80

10 ENVELOPE1,20,0,0,4,1,0,1,126,-1,0,-6,126,80
20 SOUND1,1,101,80

### Experimenting with the programs

#### Add noise channel

1045 SOUND 0,-15,3,254

#### Listing 5.1 with Noise

TBA


#### Listing 5.1 and 5.2 combined with Noise

TBA

#### Listing 5.1 and 5.2 and PROCFnkeys combined with Noise

TBA


## Chapter 6

### Vibrato and Tremelo


10 ENVELOPE1,1,0,3,-3,0,20,20,63,-1,0,-4,126,100
20 SOUND1,1,101,160

### Comparing envelopes

10 REM PROGRAM 6.1
20 REM Envelope Comparisons 
30
40 VDU15
50 ON ERROR GOTO 230
60 REM Reset Delay on Keys
70 *FX12,0
80 *KEY0 RUN|M
90 *KEY10 OLD|MLIST|M
100 PROCEnvelope
110
120 REPEAT
130 PRINT"Which Envelope?";
140 REPEAT
150 Env=GET-48
160 UNTIL Env>-1 AND Env<10
170 PRINT;TAB(16)Env
180 IF Env=0 SOUND1,-12,Pitch,40 ELSE SOUND1,Env,Pitch,40
190 UNTIL FALSE
200
210 REM Escape Routine
220 REM Speed Up Key Repeat
230 *FX12,6
240 *FX11,20
250 ON ERROR WHEN 280,
260 ERROR
270
280 DEF PROCEnvelope
290 Pitch=149
300 ENVELOPE1,4,0,0,1,1,0,1,4,-1,0,-3,126,80
310 ENVELOPE2,2,0,0,1,2,0,2,4,-1,0,-3,126,80
320 ENVELOPE3,3,0,0,1,2,0,2,4,-1,0,-3,126,80
330 ENVELOPE4,4,-2,1,1,1,1,1,4,-1,0,-3,126,80
340 ENVELOPE5,6,1,-2,1,1,1,1,4,-1,0,-3,126,80
350 ENVELOPE6,4,1,1,1,1,1,1,4,-1,0,-3,126,80
360 ENVELOPE7,4,0,8,-8,0,1,1,16,-1,0,-3,126,80
370 ENVELOPE8,4,0,28,-28,0,1,1,16,-1,0,-3,126,80
380 ENVELOPE9,8,0,8,-12,1,1,1,16,-1,0,-3,126,80
390 ENDPROC



### Producing tremolo effects

10 REM PROGRAM 6.2
20 REM Tremolo Demonstration
30
40 PROCTremolo(&1,1,-1)
50 PROCTremolo(&1,1,-.25)
60 END
70
80 DEF PROCTremolo(Chan,Dur,Step)
90 PRINT"Chan=";Chan;" Dur=";Dur;" Step=";Step
100 REPEAT
110 FOR Amp=-2 TO -15 STEP Step
120 SOUND Chan,Amp,53,Dur
130 NEXT Amp
140 FOR Amp=-14 TO -3 STEP ABS(Step)
150 SOUND Chan,Amp,53,Dur
160 NEXT Amp
170 UNTIL INKEY$(2)=" "
180 ENDPROC
190
200 REM Tremolo Using Env Control
210
220 ENVELOPE1,5,0,0,0,0,0,0,8,-8,0,-8,120,16
230 FOR Trem=1 TO 8 240 SOUND1,1,53,28
250 NEXT Trem
260 END
270
280 REM Faster Tremolo
290
300 ENVELOPE1,2,0,0,0,0,0,0,8,-8,0,-8, 120,104
310 FOR Trem=1 TO 30
320 SOUND1,1,53,2
330 NEXT Trem


#### Flush

40 PROCTremolo(&11,1,-1)

#### Listing 6.2 With Flush

10 REM PROGRAM 6.2
20 REM Tremolo Demonstration
30
40 PROCTremolo(&11,1,-1)
50 PROCTremolo(&1,1,-.25)
60 END
70
80 DEF PROCTremolo(Chan,Dur,Step)
90 PRINT"Chan=";Chan;" Dur=";Dur;" Step=";Step
100 REPEAT
110 FOR Amp=-2 TO -15 STEP Step
120 SOUND Chan,Amp,53,Dur
130 NEXT Amp
140 FOR Amp=-14 TO -3 STEP ABS(Step)
150 SOUND Chan,Amp,53,Dur
160 NEXT Amp
170 UNTIL INKEY$(2)=" "
180 ENDPROC
190
200 REM Tremolo Using Env Control
210
220 ENVELOPE1,5,0,0,0,0,0,0,8,-8,0,-8,120,16
230 FOR Trem=1 TO 8 240 SOUND1,1,53,28
250 NEXT Trem
260 END
270
280 REM Faster Tremolo
290
300 ENVELOPE1,2,0,0,0,0,0,0,8,-8,0,-8, 120,104
310 FOR Trem=1 TO 30
320 SOUND1,1,53,2
330 NEXT Trem

#### Vibrato in the pitch envelope

220 ENVELOPE1,5,1,-2,1 ,1,1,1,8,-8,0,-8,120,16

### Trills: a special kind of vibrato


10 REM PROGRAM 6.3
20 REM "Military Music" Introduction
30
40 ENVELOPE1,4,0,8,-8,0,1,1,63,0,0,-12,126,126
50 ENVELOPE2,3,0,0,1,2,0,2,126,-8,0,-8,126,30
55 ENVELOPE3,4,0,0,1,1,0,1,32,-1,0,-8,96,60
60 SOUND1,1,149,54
70 FOR Note=1 TO 9
80 READ Pitch,Dur
90 SOUND2,3,Pitch,Dur
100 SOUND3,2,Pitch+48,Dur
110 NEXT Note
120 END
130 DATA 53,12,49,4,45,12,41,4,33,4,25,4,21,4,13,4,5,6

### Producing echoes on the BBC micro

10 REM PROGRAM 6.4
20 REM Echo Production
30 REM Using Multiple Envelopes
40
50 Dur=3
60 ENVELOPE1,1,0,0,0,0,0,0,126,-4,-4,-6,126,102
70 ENVELOPE2,1,0,0,0,0,0,0,102,-4,-4,-6,102,78
80 ENVELOPE3,1,0,0,0,0,0,0,78,-4,-4,-6,78,54
90 ENVELOPE4,1,0,0,0,0,0,0,54,-4,-4,-6,54,30
100 ENVELOPE5,1,0,0,0,0,0,0,30,-4,-4,-6,30,6
110 SOUND1,1,101,Dur
120 SOUND1,2,101,Dur
130 SOUND1,3,101,Dur
140 SOUND1,4,101,Dur
150 SOUND1,5,101,Dur

#### Disable the SOUND command

110 SOUND1,1,101 ,Dur:SOUND1,1,101,Dur


10 REM PROGRAM 6.5
20 REM Echo Using a Procedure
30
40 EchoSpeed=10
50 RateOfDecay=3
60
70 FOR Note=1 TO 5
80 READ Chan,Pitch,Dur
90 PROCEcho
100 NEXT
110 END
120
130 DATA 1,5,16,2,33,16,3,53,28,1,69,2,2,65,32
140
150 DEF PROCEcho
160 AA=126
170 FOR Count=1 TO Dur
180 ALD=AA-RateOfDecay
190 ENVELOPE1,1,0,0,0,0,0,0,AA,-4,-4,-1,AA,ALD
200 SOUNDChan,1,Pitch,1
210 TIME=0:REPEAT UNTIL TIME>EchoSpeed
220 AA=ALD
230 NEXT Count
240 ENDPROC

### Pseudo echo


10 REM PROGRAM 6.6
20 REM Pseudo Echoes Using
30 REM Single Envelopes
40 REM Insert in PROGRAM 6.1
50
60 ENVELOPE1,20,12,-12,0,1,1,0,126,-6,-6,-6,126,0
70
80 ENVELOPE2,4,4,0,32,4,1,0,126,-1,-1 ,-1,126,0
90
100 ENVELOPE3,4,4,16,12,1,1,1,126,-1,-1,-1,126,0
110
120 ENVELOPE4,6,8,-16,8,8,4,2,126,-1,- 1,-1,126,0
130 ENVELOPE5,4,32,-64,4,1,1,16,126,-1 ,-1,-1,126,0

#### Combined with listing 6.1

???


### Using the pitch envelope to play tunes

10 ENVELOPE1,11,16,4,8,2,1,1,100,0,0,-100,100,100
20 SOUND1,1,101,20


10 ENVELOPE1,136,12,-4,4,17,60,12,100,0,0,-100,100,100
20 SOUND1,1,41,144


10 ENVELOPE1,10,8,-8,0,18,18,6,100,0,0,-100,100,100
20 SOUND1,1,45,84



10 ENVELOPE1,9,20,20,0,10,10,5 ,100,0,0,-100,100,100
20 SOUND1,1,149,135


### Delay effects on the BBC micro

10 REM PROGRAM 6.7
20 REM Chorus Effects
30
40 REM Alter Pitch
50 REM To Other Values
60 Pitch=227
70
80 REM 2 Channels
90 SOUND1,-12,Pitch,120
100 SOUND2,-12,Pitch,120
110 Next=GET
120
130 REM 3 Channels
140 SOUND1,-12,Pitch,120
150 SOUND2,-12,Pitch,120
160 SOUND3,-12,Pitch,120
170 Next=GET
180
190 REM 2 Channels with Increased 
200 REM Pitch Value
210 SOUND1,-12,Pitch,120
220 SOUND2,-12,Pitch+1,120
230 Next=GET
240
250 REM 3 Channels with Increased
260 REM Pitch Value
270 SOUND1,-12,Pitch,120
280 SOUND2,-12,Pitch+1,120
290 SOUND3,-12,Pitch-1,120
300 Next=GET
310
320 REM Pseudo Chorus
330 REM Using Fast Vibrato
340 ENVELOPE1,1,0,0,1,1,0,1,100,0,0,-100,100,100
350 SOUND1,1,Pitch,120



### Beat frequencies: the weaving in and out


10 SOUND1,-12,52,120
20 SOUND2,-12,53,120



10 REM PROGRAM 6.8
20 REM French Accordion Music
30 REM Using Chorus Effect
40
50 ENVELOPE1,3,0,0,0,0,0,0,8,-1,0,-6,124,60
60
70 FOR Tune=1 TO 16
80 READ Note,Dur
90 IF Note=0 Amp=0 ELSE Amp=1
100 SOUND1,Amp,Note,Dur
110 SOUND2,Amp,Note,Dur
120 NEXT Tune
130 END
140
150 DATA 61,8,77,8,113,8,109,72
160 DATA 61,8,81,8,113,8,109,32
170 DATA 0,8,93,8,101,8,0,4,65,4,61,4,53,4,61,4


#### Better

110 SOUND2,Amp,Note+1,Dur

#### Listing 6.8 with better

10 REM PROGRAM 6.8
20 REM French Accordion Music
30 REM Using Chorus Effect
40
50 ENVELOPE1,3,0,0,0,0,0,0,8,-1,0,-6,124,60
60
70 FOR Tune=1 TO 16
80 READ Note,Dur
90 IF Note=0 Amp=0 ELSE Amp=1
100 SOUND1,Amp,Note,Dur
110 SOUND2,Amp,Note+1,Dur
120 NEXT Tune
130 END
140
150 DATA 61,8,77,8,113,8,109,72
160 DATA 61,8,81,8,113,8,109,32
170 DATA 0,8,93,8,101,8,0,4,65,4,61,4,53,4,61,4



### Bells and the BBC micro

10 SOUND1,-15,160,60
20 SOUND2,-15,26,60


10 REM PROGRAM 6.9
20 REM Bells and Chimes
30
40 ENVELOPE1,4,0,0,0,0,0,0,126,-1,-1,-1,126,0
50
60 FOR Pitch=1 TO 8
70 READ Note,Dur
80 SOUND1,1,Note,Dur
90 SOUND2,1,Note+120,Dur
100 NEXT Pitch
110
120 SOUND1,1,117,64
130 SOUND2,1,6,64
140 SOUND1,1,129,16
150 SOUND2,1,53,16
160 END
170
180 DATA 117,16,101,16,109,16,81,32
190 DATA 81,16,109,16,117,16,101,64

10 FOR Bell=1 TO 20
20 SOUND1,-15,RND(101),10
30 SOUND2,-15,RND(153)+102,10
40 NEXT Bell

## Chapter 7

### Simple sound effects

10 REM PROGRAM 7.1
20 REM Examples of Channel 0
30 REM Sound Effects
40
50 REM Machine Gun
60 FOR Burst=1 TO 3
70 FOR Bullet=1 TO 12
80 SOUND0,-15,5,1
90 SOUND0,-15,6,1
100 NEXT Bullet
110 PROCDelay(100)
120 NEXT Burst
130 PROCDelay(100)
140
150 REM Ricochet
160 ENVELOPE1,132,28,-1,0,1,28,0,126,-8,-3,-6,126,80
170 ENVELOPE2,6,0,0,0,0,0,0,126,-8,-3,-6,126,80
180 FOR Shot=1 TO 3
190 SOUND2,1,149,20
200 SOUND0,2,6,20
210 NEXT Shot
220 PROCDelay(400)
230
240 REM Cymbal or Anvil
250 ENVELOPE1,3,0,0,0,0,0,0,126,-4,-2,-4,126,100
260 ENVELOPE2,3,0,0,0,0,0,0,80,-2,-2,-2,80,40
270 FOR Clang=1 TO 8
280 SOUND&101,1,197,1
290 SOUND&100,2,4,4
300 PROCDelay(100)
310 NEXT Clang
320 PROCDelay(200)
330
340 REM Creature
350 ENVELOPE1,4,0,0,0,0,0,0,32,-1,0,-4,126,0
360 SOUND1,0,220,0
370 FOR Step=1 TO 8
380 FOR Splodge=5 TO 7
390 SOUND0,1,Splodge,Splodge-3 
400 NEXT Splodge
410 PROCDelay(200)
420 NEXT Step
430
440 REM Mad Factory
450 SOUND1,0,100,0
460 FOR Work=1 TO 16
470 FOR Noise=1 TO 7
480 SOUND0,-12,Noise,2
490 NEXT Noise
500 NEXT Work
510 PROCDelay(200)
520
530 REM Space Ship Taking Off
540 ENVELOPE1,40,0,0,0,0,0,0,126,0,0,-2,126,126
550 SOUND0,-15,7,150
560 FOR Engines=180 TO 255 STEP.5
570 SOUND1,0,Engines,1
580 NEXT Engines
590 SOUND0,1,7,100
600 END
610
620 DEF PROCDelay(Time)
630 TIME=0:REPEAT UNTIL TIME>Time
640 ENDPROC



#### Helicopter

80 SOUND0,-15,4,1
90 SOUND0,-15,5,2


#### Car won’t start
95 SOUND0,-15,6,1

### Exploring the sound channel

Add this to listing 6.1 (envelope comparison)

185 SOUND0,-15,3,40

#### Combined with program 6.1

10 REM PROGRAM 6.1 with Noise
20 REM Envelope Comparisons 
30
40 VDU15
50 ON ERROR GOTO 230
60 REM Reset Delay on Keys
70 *FX12,0
80 *KEY0 RUN|M
90 *KEY10 OLD|MLIST|M
100 PROCEnvelope
110
120 REPEAT
130 PRINT"Which Envelope?";
140 REPEAT
150 Env=GET-48
160 UNTIL Env>-1 AND Env<10
170 PRINT;TAB(16)Env
180 IF Env=0 SOUND1,-12,Pitch,40 ELSE SOUND1,Env,Pitch,40
185 SOUND0,-15,3,40
190 UNTIL FALSE
200
210 REM Escape Routine
220 REM Speed Up Key Repeat
230 *FX12,6
240 *FX11,20
250 ON ERROR WHEN 280,
260 ERROR
270
280 DEF PROCEnvelope
290 Pitch=149
300 ENVELOPE1,4,0,0,1,1,0,1,4,-1,0,-3,126,80
310 ENVELOPE2,2,0,0,1,2,0,2,4,-1,0,-3,126,80
320 ENVELOPE3,3,0,0,1,2,0,2,4,-1,0,-3,126,80
330 ENVELOPE4,4,-2,1,1,1,1,1,4,-1,0,-3,126,80
340 ENVELOPE5,6,1,-2,1,1,1,1,4,-1,0,-3,126,80
350 ENVELOPE6,4,1,1,1,1,1,1,4,-1,0,-3,126,80
360 ENVELOPE7,4,0,8,-8,0,1,1,16,-1,0,-3,126,80
370 ENVELOPE8,4,0,28,-28,0,1,1,16,-1,0,-3,126,80
380 ENVELOPE9,8,0,8,-12,1,1,1,16,-1,0,-3,126,80
390 ENDPROC


### Sound Effects Generator program

10 REM PROGRAM 7.2
20 REM Sound Effects Generator
30
40 *TV255,1
50 MODE7
60
70 PROCSetUp
80 PROCOptions
90
100 REPEAT
110 PROCInput
120 REM Cursor Off
130 VDU23;11,0;0;0;0
140 PROCAction
150 PROCPrintEnv
160 PROCOptions
170 REM Cursor On
180 VDU23;11,255;0;0;0
190 UNTIL Input$="Q"
200 END
210
220 DEF PROCSetUp
230 SN$="Both "
240 Rep$="On "
250 P=3
260 Pitch=101
270 Inp$="EPRSNTAQ"
280 PROCSetSN
290 ENDPROC
300
310 DEF PROCSetSN
320 SAA=126:SAD=-1:SAS=0:SAR=-4
330 SALA=126:SALD=80
340 NAA=126:NAD=-1:NAS=0:NAR=-4
350 NALA=126:NALD=80
360 ENDPROC
370
380 DEF PROCOptions
390
400 FOR Title=0 TO 1
410 PRINTTAB(6,Title)CHR$134;CHR$141"SOUND EFFECTS GENERATOR"
420 NEXT Title
430
440 PRINTTAB(12,3)CHR$133"O P T I O N S"
450 PRINTTAB(0,5)CHR$129"E"CHR$130"nvelope"
460 PRINTTAB(0,6)CHR$129"P"CHR$130"lay"
470 PRINTTAB(0,7)CHR$129"R"CHR$130"epeat Pitch Envelope"TAB(25)CHR$131;Rep$
480 PRINTTAB(0,8)CHR$129"S"CHR$130"ound or Noise"TAB(25)CHR$131;SN$
490 PRINTTAB(0,9)CHR$129"N"CHR$130"oise Parameter"TAB(25)CHR$131;"P = ";P
500 PRINTTAB(0,10)CHR$129"T"CHR$130"Parameter - Alter "
510 PRINTTAB(0,11)CHR$129"A"CHR$130"lter Pitch"TAB(25)CHR$131;Pitch
520 PRINTTAB(0,12)CHR$129"Q"CHR$130"uit"
530 ENDPROC
540
550 DEF PROCInput
560 PRINTTAB(26,13)CHR$131"?? ";
570 REPEAT
580 Input$=GET$
590 Action=INSTR(Inp$,Input$)
600 UNTIL Action>0
610 PRINTInput$
620 ENDPROC
630
640 DEF PROCAction
650 ON Action GOTO 660,670,680,690,700,710,720,730
660 PROCEnvelope:ENDPROC
670 PROCPlay:ENDPROC
680 PROCRepeat:ENDPROC
690 PROCSoundNoise:ENDPROC
700 PROCNoiseParam:ENDPROC
710 PROCTParam:ENDPROC
720 PROCAlterPitch:ENDPROC
730 ENDPROC
740
750 DEF PROCEnvelope
760 T1=RND(20):T=T1
770 PI1=-129+RND(256)
780 PI2=-129+RND(256)
790 PI3=-129+RND(256)
800 PN1=RND(256)-1
810 PN2=RND(256)-1
820 PN3=RND(256)-1
830 PROCPlay
840 ENDPROC
850
860 DEF PROCPlay
870 ENVELOPE1,T,PI1,PI2,PI3,PN1,PN2,PN3,SAA,SAD,SAS,SAR,SALA,SALD
880 ENVELOPE2,T,0,0,0,0,0,0,NAA,NAD,NAS,NAR,NALA,NALD
890 SOUND&11,1,Pitch,254
900 SOUND&10,2,P,254
910 ENDPROC
920
930 DEF PROCRepeat
940 IF Rep$="Off" Rep$="On ":T=T1:ENDPROC
950 IF Rep$="On " Rep$="Off":T=T1+128
960 ENDPROC
970
980 DEF PROCSoundNoise
990 PROCSetSN
1000 IF SN$="Sound" SN$="Noise":SAA=-126:SAD=0:SAS=0:SAR=-126:SALA=0:SALD=0:ENDPROC
1010 IF SN$="Noise" SN$="Both ":ENDPROC
1020 IF SN$="Both " SN$="Sound":NAA=-126:NAD=0:NAS=0:NAR=-126:NALA=0:NALD=0
1030 ENDPROC
1040
1050 DEF PROCNoiseParam
1060 IF P=3 P=7 ELSE IF P=7 P=3
1070 ENDPROC
1080
1090 DEF PROCTParam
1100 PRINTTAB(2,10)CHR$133;"Enter T Value 1 - 127"
1110 REPEAT
1120 PRINTTAB(24,10)CHR$133;CHR$136;
1130 INPUT T1
1140 PRINTTAB(26,10)SPC(8)
1150 UNTIL T1>0 AND T1<128
1160 IF Rep$="On ":T=T1 ELSE T=T1+128
1170 ENDPROC
1180
1190 DEF PROCAlterPitch
1200 PRINTTAB(2,11)CHR$133;" Enter Pitch 0 - 255 "
1210 REPEAT
1220 PRINTTAB(24,11)CHR$133;CHR$136;
1230 INPUT Pitch
1240 PRINTTAB(26,11)SPC8
1250 UNTIL Pitch>-1 AND Pitch<256
1260 ENDPROC
1270
1280 DEF PROCPrintEnv
1290 PRINTTAB(0,15)CHR$134"Channel 1"
1300 PRINTTAB(0,17)SPC(17)
1310 PRINTTAB(0,16)"ENVELOPE1,";T1;",";PI1;",";PI2;",";PI3;",";PN1;",";PN2;",";PN3;",";SAA;",";SAD;",";SAS;",";SAR;",";SALA;",";SALD
1320 PRINTTAB(0,19)CHR$134"Channel 0"
1330 PRINTTAB(0,21)SPC(17)
1340 PRINTTAB(0,20)"ENVELOPE2,";T;",0,0,0,0,0,0,";NAA;",";NAD;",";NAS;",";NAR;",";NALA;",";NALD
1350 ENDPROC


#### Bugs

Should 1310 use T and not T1?

1310 PRINTTAB(0,16)"ENVELOPE1,";T;",";PI1;",";PI2;",";PI3;",";PN1;",";PN2;",";PN3;",";SAA;",";SAD;",";SAS;",";SAR;",";SALA;",";SALD

In fact, some of the variables are not declared (T, PI1, PI2, PI3, PN1, PN2, PN3)), if you press “S” as the first key, you get a “No such variable” error.

This line works:

1310 PRINTTAB(0,16)"ENVELOPE1,";SAA;",";SAD;",";SAS;",";SAR;",";SALA;",";SALD

Then there is a similar error in 1340

1340 PRINTTAB(0,20)"ENVELOPE2,";T;",0,0,0,0,0,0,";NAA;",";NAD;",";NAS;",";NAR;",";NALA;",";NALD

This line works:

1340 PRINTTAB(0,20)"ENVELOPE2,";NAA;",";NAD;",";NAS;",";NAR;",";NALA;",";NALD

This is because PROCEnvelope is not called (which is where the undefined variables (T, PI1, PI2, PI3, PN1, PN2, PN3) are set, prior to PROCPrintEnv), if “S” is the first key press causing PROCSoundNoise to be called, via PROC Action, in the main loop. However, PROCEnvelope calls the PROCPlay start after setting.

A fix would be to separate PROCEnvelope into two calls PROCSetEnvelope and PROCPlay, where PROCSetEnvelope sets the undefined variables. Then PROCSetEnvelope can also be called as part of PROCSetUp, either just after or just before PROCSetSN.

Line changes:

- 285
- 750-825

Like this:


10 REM PROGRAM 7.2.1 (fixed)
20 REM Sound Effects Generator
30
40 *TV255,1
50 MODE7
60
70 PROCSetUp
80 PROCOptions
90
100 REPEAT
110 PROCInput
120 REM Cursor Off
130 VDU23;11,0;0;0;0
140 PROCAction
150 PROCPrintEnv
160 PROCOptions
170 REM Cursor On
180 VDU23;11,255;0;0;0
190 UNTIL Input$="Q"
200 END
210
220 DEF PROCSetUp
230 SN$="Both "
240 Rep$="On "
250 P=3
260 Pitch=101
270 Inp$="EPRSNTAQ"
280 PROCSetSN
285 PROCSetEnvelope
290 ENDPROC
300
310 DEF PROCSetSN
320 SAA=126:SAD=-1:SAS=0:SAR=-4
330 SALA=126:SALD=80
340 NAA=126:NAD=-1:NAS=0:NAR=-4
350 NALA=126:NALD=80
360 ENDPROC
370
380 DEF PROCOptions
390
400 FOR Title=0 TO 1
410 PRINTTAB(6,Title)CHR$134;CHR$141"SOUND EFFECTS GENERATOR"
420 NEXT Title
430
440 PRINTTAB(12,3)CHR$133"O P T I O N S"
450 PRINTTAB(0,5)CHR$129"E"CHR$130"nvelope"
460 PRINTTAB(0,6)CHR$129"P"CHR$130"lay"
470 PRINTTAB(0,7)CHR$129"R"CHR$130"epeat Pitch Envelope"TAB(25)CHR$131;Rep$
480 PRINTTAB(0,8)CHR$129"S"CHR$130"ound or Noise"TAB(25)CHR$131;SN$
490 PRINTTAB(0,9)CHR$129"N"CHR$130"oise Parameter"TAB(25)CHR$131;"P = ";P
500 PRINTTAB(0,10)CHR$129"T"CHR$130"Parameter - Alter "
510 PRINTTAB(0,11)CHR$129"A"CHR$130"lter Pitch"TAB(25)CHR$131;Pitch
520 PRINTTAB(0,12)CHR$129"Q"CHR$130"uit"
530 ENDPROC
540
550 DEF PROCInput
560 PRINTTAB(26,13)CHR$131"?? ";
570 REPEAT
580 Input$=GET$
590 Action=INSTR(Inp$,Input$)
600 UNTIL Action>0
610 PRINTInput$
620 ENDPROC
630
640 DEF PROCAction
650 ON Action GOTO 660,670,680,690,700,710,720,730
660 PROCEnvelope:ENDPROC
670 PROCPlay:ENDPROC
680 PROCRepeat:ENDPROC
690 PROCSoundNoise:ENDPROC
700 PROCNoiseParam:ENDPROC
710 PROCTParam:ENDPROC
720 PROCAlterPitch:ENDPROC
730 ENDPROC
740
750 DEF PROCSetEnvelope
760 T1=RND(20):T=T1
770 PI1=-129+RND(256)
780 PI2=-129+RND(256)
790 PI3=-129+RND(256)
795 PN1=RND(256)-1
800 PN2=RND(256)-1
805 PN3=RND(256)-1
810 ENDPROC
815
820 DEF PROCEnvelope
825 PROCSetEnvelope
830 PROCPlay
840 ENDPROC
850
860 DEF PROCPlay
870 ENVELOPE1,T,PI1,PI2,PI3,PN1,PN2,PN3,SAA,SAD,SAS,SAR,SALA,SALD
880 ENVELOPE2,T,0,0,0,0,0,0,NAA,NAD,NAS,NAR,NALA,NALD
890 SOUND&11,1,Pitch,254
900 SOUND&10,2,P,254
910 ENDPROC
920
930 DEF PROCRepeat
940 IF Rep$="Off" Rep$="On ":T=T1:ENDPROC
950 IF Rep$="On " Rep$="Off":T=T1+128
960 ENDPROC
970
980 DEF PROCSoundNoise
990 PROCSetSN
1000 IF SN$="Sound" SN$="Noise":SAA=-126:SAD=0:SAS=0:SAR=-126:SALA=0:SALD=0:ENDPROC
1010 IF SN$="Noise" SN$="Both ":ENDPROC
1020 IF SN$="Both " SN$="Sound":NAA=-126:NAD=0:NAS=0:NAR=-126:NALA=0:NALD=0
1030 ENDPROC
1040
1050 DEF PROCNoiseParam
1060 IF P=3 P=7 ELSE IF P=7 P=3
1070 ENDPROC
1080
1090 DEF PROCTParam
1100 PRINTTAB(2,10)CHR$133;"Enter T Value 1 - 127"
1110 REPEAT
1120 PRINTTAB(24,10)CHR$133;CHR$136;
1130 INPUT T1
1140 PRINTTAB(26,10)SPC(8)
1150 UNTIL T1>0 AND T1<128
1160 IF Rep$="On ":T=T1 ELSE T=T1+128
1170 ENDPROC
1180
1190 DEF PROCAlterPitch
1200 PRINTTAB(2,11)CHR$133;" Enter Pitch 0 - 255 "
1210 REPEAT
1220 PRINTTAB(24,11)CHR$133;CHR$136;
1230 INPUT Pitch
1240 PRINTTAB(26,11)SPC8
1250 UNTIL Pitch>-1 AND Pitch<256
1260 ENDPROC
1270
1280 DEF PROCPrintEnv
1290 PRINTTAB(0,15)CHR$134"Channel 1"
1300 PRINTTAB(0,17)SPC(17)
1310 PRINTTAB(0,16)"ENVELOPE1,";T1;",";PI1;",";PI2;",";PI3;",";PN1;",";PN2;",";PN3;",";SAA;",";SAD;",";SAS;",";SAR;",";SALA;",";SALD
1320 PRINTTAB(0,19)CHR$134"Channel 0"
1330 PRINTTAB(0,21)SPC(17)
1340 PRINTTAB(0,20)"ENVELOPE2,";T;",0,0,0,0,0,0,";NAA;",";NAD;",";NAS;",";NAR;",";NALA;",";NALD
1350 ENDPROC



### Using channel 0 to produce otherwise unobtainable low notes

10 FOR Pitch=200 TO 1 STEP-4
20 SOUND1 ,0,Pitch,10
30 SOUND0,- 15,3,10
40 NEXT Pitch



### Designing a rhythm unit


10 REM PROGRAM 7.3
20 REM Rhythm Unit
30
40 *TV255,1
50 MODE7
70 PROCSetUp
80 PROCTitlePage
90 PROCPlay
100 END
110
120 DEF PROCSetUp
130 Tempo=2
140 Rhythm=360
150 ENVELOPE1,1,0,0,0,0,0,0,126,-3,-3,-6,126,100
160 ENVELOPE2,1,0,0,0,0,0,0,32,-4,-4,-8,110,60
170
180 DEF PROCTitlePage
190 FOR Title=1 TO 2
200 PRINTTAB(6,Title)CHR$141;CHR$134"RHYTHM UNIT"
210 NEXT Title
220 PRINTTAB(1,4)CHR$129;"1";CHR$130;"Bossa Nova"
230 PRINTTAB(1,5)CHR$129;"2";CHR$130;"Rock"
240 PRINTTAB(1,6)CHR$129;"3";CHR$130;"12/8 Rock"
250 PRINTTAB(1,7)CHR$129;"4";CHR$130;"Swing"
260 PRINTTAB(1,8)CHR$129;"5";CHR$130;"Waltz"
270 PRINTTAB(1,9)CHR$129;"Q";CHR$130;"Quit"
280 ENDPROC
290
300 DEF PROCPlay
310 REPEAT
320 *FX15,1
330 IF INKEY(-49) Rhythm=450
340 IF INKEY(-50) Rhythm=480
350 IF INKEY(-18) Rhythm=520
360 IF INKEY(-19) Rhythm=550
370 IF INKEY(-20) Rhythm=580
380 READ Env,Pit,Dur
390 SOUND0,Env,Pit,Dur*Tempo
400 IF Env=0 RESTORE Rhythm
410 UNTIL INKEY(-17)
420 ENDPROC
430
440 REM Bossa Nova
450 DATA 1,4,2,2,5,2,2,5,2,1,4,2,2,5,2,2,5,2,1,4,2,2,5,2,0,0,0
460
470 REM Rock
480 DATA 1,5,2,2,5,2,1,4,2,1,4,1,1,5,2,2,5,2,2,5,1,1,4,1,2,4,1,2,4,2
490 DATA 1,5,2,2,5,2,1,4,2,1,4,1,1,5,2,2,5,2,2,5,1,1,4,1,2,5,1,1,6,1,1,6,1,0,0 ,0
500
510 REM 12/8 Rock
520 DATA 1,5,2,2,4,1,2,4,1,2,4,2,1,4,2,2,4,2,2,4,2,1,5,2,2,4,1,2,4,1,2,4,2,1,4,2,2,4,2,1,6,2,0,0,0
530
540 REM Swing
550 DATA 1,5,4,2,4,3,2,4,1,1,5,4,2,4,3,2,4,1,1,5,4,2,4,3,2,4,1,1,6,2,2,4,2,2,4,1,2,4,1,2,4,2,0,0,0
560
570 REM Waltz
580 DATA 1,5,4,2,4,4,2,4,4,1,6,4,2,4,4,2,4,4,1,5,4,2,4,4,2,4,4,1,6,4,2,4,2,2,4,2,2,5,2,1,5,2,0,0,0


### The CAPS LOCK and SHIFT LOCK lights and the ADVAL function

Replace 380, 390, 400 with

380 IF ADVAL(-5)>0 READ Env,Pit,Dur: SOUND0,Env,Pit,Dur*Tempo:IF Env=0 RESTORE Rhythm

Inserting the line:

10 REM PROGRAM 7.3.1 (fixed)
20 REM Rhythm Unit
30
40 *TV255,1
50 MODE7
70 PROCSetUp
80 PROCTitlePage
90 PROCPlay
100 END
110
120 DEF PROCSetUp
130 Tempo=2
140 Rhythm=360
150 ENVELOPE1,1,0,0,0,0,0,0,126,-3,-3,-6,126,100
160 ENVELOPE2,1,0,0,0,0,0,0,32,-4,-4,-8,110,60
170
180 DEF PROCTitlePage
190 FOR Title=1 TO 2
200 PRINTTAB(6,Title)CHR$141;CHR$134"RHYTHM UNIT"
210 NEXT Title
220 PRINTTAB(1,4)CHR$129;"1";CHR$130;"Bossa Nova"
230 PRINTTAB(1,5)CHR$129;"2";CHR$130;"Rock"
240 PRINTTAB(1,6)CHR$129;"3";CHR$130;"12/8 Rock"
250 PRINTTAB(1,7)CHR$129;"4";CHR$130;"Swing"
260 PRINTTAB(1,8)CHR$129;"5";CHR$130;"Waltz"
270 PRINTTAB(1,9)CHR$129;"Q";CHR$130;"Quit"
280 ENDPROC
290
300 DEF PROCPlay
310 REPEAT
320 *FX15,1
330 IF INKEY(-49) Rhythm=450
340 IF INKEY(-50) Rhythm=480
350 IF INKEY(-18) Rhythm=520
360 IF INKEY(-19) Rhythm=550
370 IF INKEY(-20) Rhythm=580
380 IF ADVAL(-5)>0 READ Env,Pit,Dur: SOUND0,Env,Pit,Dur*Tempo:IF Env=0 RESTORE Rhythm
410 UNTIL INKEY(-17)
420 ENDPROC
430
440 REM Bossa Nova
450 DATA 1,4,2,2,5,2,2,5,2,1,4,2,2,5,2,2,5,2,1,4,2,2,5,2,0,0,0
460
470 REM Rock
480 DATA 1,5,2,2,5,2,1,4,2,1,4,1,1,5,2,2,5,2,2,5,1,1,4,1,2,4,1,2,4,2
490 DATA 1,5,2,2,5,2,1,4,2,1,4,1,1,5,2,2,5,2,2,5,1,1,4,1,2,5,1,1,6,1,1,6,1,0,0 ,0
500
510 REM 12/8 Rock
520 DATA 1,5,2,2,4,1,2,4,1,2,4,2,1,4,2,2,4,2,2,4,2,1,5,2,2,4,1,2,4,1,2,4,2,1,4,2,2,4,2,1,6,2,0,0,0
530
540 REM Swing
550 DATA 1,5,4,2,4,3,2,4,1,1,5,4,2,4,3,2,4,1,1,5,4,2,4,3,2,4,1,1,6,2,2,4,2,2,4,1,2,4,1,2,4,2,0,0,0
560
570 REM Waltz
580 DATA 1,5,4,2,4,4,2,4,4,1,6,4,2,4,4,2,4,4,1,5,4,2,4,4,2,4,4,1,6,4,2,4,2,2,4,2,2,5,2,1,5,2,0,0,0


### Using sound effects in utility programs

VDU 7

1000 DEF PROCSound
1010 SOUND0,-12,4,2
1020 ENDPROC



### Soundscapes: a total sound effects program

10 REM PROGRAM 7.4
20 REM Sea, Surf & Seagulls
30
40 ENVELOPE1,130,28,-1,0,1,28,0,63,-8,-4,-6,126,80
50 ENVELOPE2,2,0,0,0,0,0,0,63,-1,0,-4,126,116
60 Foghorn=0
70
80 REPEAT
90 Foghorn=Foghorn+1
100 Pitch=RND(64)+190
110 IF ADVAL(-6)>0 SOUND1,0,Pitch,0
120
130 Pulse=RND(20)+15
140 Lull1=RND(10)+25
150 Lull2=RND(10)+25
160 Flow=RND(6)+8
170 Ebb1=RND(2)+3
180 Force=RND(26)+100
190
200 Wave=RND(3)+3
210 Ebb2=RND(5)^3+129
220
230 REM Envelope for Waves
240 ENVELOPE3,Pulse,0,1,0,Lull1,1,Lull2,Flow,-Ebb1,-1,-1,Force,90
250
260 IF ADVAL(-5)>3 SOUND0,3,Wave,Ebb2: SOUND&1000,0,0,Ebb2
270
280 REM Seagull
290 IF ADVAL(-7)>0:IF RND(80)=1 SOUND2,1,RND(76)+101,20
300
310 REM Foghorn
320 IF ADVAL(-8)>0:IF Foghorn>140 SOUND&113,2,0,80:SOUND&112,2,0,80:IF Foghorn >140 Foghorn=0
330 UNTIL FALSE

#### Add
315 PRINT Foghorn

#### Remove ADVAL

260 SOUND0,3,Wave,Ebb2:SOUND&1000,0,0,Ebb2


## Chapter 8

### The BBC as a monophonic keyboard


10 REM PROGRAM 8.1
20 REM Monophonic Keyboard
30 REM From G (Pitch=33)
40 REM To E (Pitch=117)
50
60 ON ERROR GOTO150
70
80 Keyboard$="Q2W3ER5T6YU8I9O0P^[\_"
90 *FX11,1
100 REPEAT
110 Key$=INKEY$(0)
120 Pitch=29+4*INSTR(Keyboard$,Key$)
130 IF Key$<>"":IF Pitch>29 SOUND&11,-15,Pitch,2
140 UNTIL FALSE
150 *FX12,0



#### Add an envelope

ENVELOPE1,1 ,0,0,0 ,0,0,0,126,-4,0,-4,126,80

### Keyboard display program

1000 REM PROGRAM 8.2
1010 REM Keyboard Display
1020
1030 DEF PROCKeyBoard
1040 CLS
1050 FOR Title=1 TO 2
1060 PRINTTAB(9,1+Title)CHR$141;CHR$132;"K E Y B O A R D"
1070 NEXT Title
1080 
1090 PRINT''" f1   f2   f3   f4"
1100 PRINT"ENV1 ENV2 ENV3 ENV4"
1110 PRINT''"  2  3     5  6     8  9  0     ^ |"
1120
1130 K$=CHR$156+CHR$151+CHR$157
1140 J$=CHR$148+CHR$181+" "
1150
1160 FOR Key=1 TO 4 
1170 PRINTCHR$151;CHR$255; 
1180 PRINTK$;K$;J$;K$;K$;J$; 
1190 PRINTK$;K$;K$;J$;K$;K$;CHR$156 
1200 NEXT Key
1210
1220 FOR Key=1 TO 5
1230 PRINTCHR$151;CHR$157;CHR$148;
1240 PRINTSTRING$(12,CHR$181+" "+" ") 
1250 NEXT Key
1260
1270 PRINT" Q  W  E  R  T  Y  U  I  O  P  @  [  _"
1280 ENDPROC

#### Insert the following procedure call at the beginning of the following program listings

PROCKeyBoard

### Alternative methods of note production

10 REM PROGRAM 8.3
20 REM 3-Note Polyphonic
30 REM Keyboard (Q - _)
40 REM From G (Pitch=81)
50 REM To E (Pitch=165)
60
70 DIM KBoard%(26)
80 DIM KFlag%(26)
90 DIM CH%(3)
100
110 FOR Channel=1 TO 3
120 CH%(Channel)=0
130 NEXT Channel
140
150 FOR Keys=1 TO 26
160 READ Data
170 KBoard%(Keys)=Data
180 KFlag%(Keys)=-1
190 NEXT Keys
200
210 DATA 17,50,34,18,35,52,20,36,53
220 DATA 69,54,22,38,39,55,40,56,72
230 DATA 25,57,121,41,114,115,116,21
240
250 REM f1=ENVELOPE1:f2=ENVELOPE2
260 REM f3=ENVELOPE3:f4=ENVELOPE4
270
280 ENVELOPE1,1,0,0,0,0,0,0,126,-4,-4,-4,126,100
290 ENVELOPE2,129,12,0,-4,1,0,3,126,-1,0,-4,126,100
300 ENVELOPE3,1,0,1,-1,0,1,1,126,-1,0,-4,126,100
310 ENVELOPE4,8,0,0,0,0,0,0,63,10,0,-63,63,126
320
330 Pitch%=77
340 E%=2
350
360 KPressed%=0
370 REPEAT
380 FOR N%=1 TO 26
390 IF INKEY(-(KBoard%(N%)))=KFlag%(N%) PROCP
400 NEXT N%
410 UNTIL FALSE
420 END
430
440 DEF PROCP
450 IF N%>22 PROCE:ENDPROC
460 IF KPressed%=3 AND KFlag%(N%) ENDPROC
470 Chan%=0
480 IF KFlag%(N%) REPEAT Chan%=Chan%+1:UNTIL CH%(Chan%)=0:CH%(Chan%)=N%:SOUND&10+Chan%,E%,Pitch%+N%*4,255:KPressed%=KPressed%+1
490 IF NOT KFlag%(N%) REPEAT Chan%=Chan%+1:UNTIL CH%(Chan%)=N%:CH%(Chan%)=0:SOUND&1010+Chan%,0,0,0:KPressed%=KPressed%-1
500 KFlag%(N%)=NOT KFlag%(N%)
510 ENDPROC
520
530 DEF PROCE
540 E%=N%-22
550 ENDPROC


#### Brute force

390 IF KeysPressed>3 ENDPROC ELSE IF INKEY (-17) Note=33:PROCSound:KeysPressed:KeysPressed+1

### Further additions to the musical keyboard: a bass sequencer

10 REM PROGRAM 8.4
20 REM Bass Sequencer with
30 REM Duophonic Keyboard
40 REM Alter 460: Add 345, 375 &
50 REM 560 plus in PROGRAM 8.3
60
345 Env%=1
375 PROCBass
560 DEF PROCBass
570 IF ADVAL(-8)<1 ENDPROC
580 READ P%,D%:IF P%=-1 RESTORE 620:READ P%,D%
590 SOUND3,Env%,P%,D%
600 ENDPROC
610
620 DATA 33,4,33,4,45,4,53,4,-1,-1


### Altering the bass riff


346 BassPitch%=33
590 SOUND3,Env%,BassPitch%+P%,D%
620 DATA 0,4,0,4,12,4,20,4,-1,-1


565 IF ADVAL(5)>0 SOUND0,Env%,4,2

#### Combine with Rhythm Unit listing from chapter 7 (listing 7.3 or 7.3.1)

????

#### More bass lines to try

REM Key G Minor
620 DATA 33,4,81,4,49,4,53,4,57,4,61,4,13,4,61,4,-1,1

REM Key G Minor
620 DATA 33,4,45,4,65,4,61,4,-1,-1

REM Key G Major
620 DATA 33,8,49 ,2,61,2,81,4,73,4,61,4,73,4,89,4,-1,-1

REM Key A Minor/G Major
620 DATA 41,4,49 ,4,53,4,33,4,49,4,61,4,-1,-1

REM Key C Minorish!: Set Env%=4 or Similar
620 DATA 5,16,17,16,13,16,9,16,-1,-1

## Chapter 9


### Selecting the notes and octave range


10 REM PROGRAM 9.1
20 REM 1 Channel Version of Mozart's
30 REM Rondo Alla Turca
40
50 Scale$=" C C#D D#E F F#GG#A A#B"
60 Key=1
70
80 ENVELOPE1,1,0,0,0,0,0,0,126,-2,0,- 10,126,100
90 CurrentEnv=1
100
110 FOR N=1 TO 46
120 READ Note$,Dur
130 PROCPlayNote
140 NEXT N
150
160 END
170
180 DATA B2,2,A2,2,G#2,2,A2,2
190 DATA C3,4,R,4,D3,2,C3,2,B2,2,C3,2
200 DATA E3,4,R,4,F3,2,E3,2,D#3,2,E3,2
210 DATA B3,2,A3,2,G#3,2,A3,2,B3,2,A3, 2,G#3,2,A3,2
220 DATA C4,8,A3,4,C4,2,B3,1,A3,1
230 DATA B3,4,A3,4,G3,4,A3,2,G3,1,A3,1
240 DATA B3,4,A3,4,G3,4,A3,2,G3,1,A3,1
250 DATA B3,4,A3,4,G3,4,F#3,4
260 DATA E3,8
270
280 DEF PROCPlayNote
290 PROCAnalyseNote
300 PRINT Note$,Pitch,Octave
310 SOUND1,Env,Pitch,Dur
320 ENDPROC
330
340 DEF PROCAnalyseNote
350 IF Note$="R" Env=0:ENDPROC ELSE Env=CurrentEnv
360 IF LEN(Note$)<2 OR LEN(Note$)>3 THEN PRINT"ERROR IN DATA ";Note$:PRINT"Not e Number ";N:STOP
370 IF LEN(Note$)=2 THEN NoteName$=LEFT$(Note$,1) ELSE NoteName$=LEFT$(Note$,2 )
380 Octave=VAL(RIGHT$(Note$,1))
390 Pitch=Key+INSTR(Scale$,NoteName$)/ 3*4+(Octave-1)*48
400 IF Pitch<0 OR Pitch>255 THEN PRINT "ERROR IN PITCH DATA ";Note$;" Pitch =" ;Pitch:PRINT"Note Number ";N:STOP
410 ENDPROC

### The negative ADVAL method

10 REM PROGRAM 9.2
20 REM 3 Channel Version of Mozart's 30 REM Rondo Alla Turca
40 REM Using a Single Array for
50 REM Each Channel
60
70 REM C1=Number of Notes for 
80 REM Channel 1 etc
90 C1=46:C2=30:C3=29
100
110 REM 1st Subscript Refers to:
120 REM 1 - Channel Number/Attributes 130 REM 2 - Envelope Number
140 REM 3 - Pitch Value
150 REM 4 - Duration
160
170 DIM Chan1(4,C1)
180 DIM Chan2(4,C2)
190 DIM Chan3(4,C3)
200
210 Scale$=" C C#D D#E F F#GG#A A#B" 
220 Key=1 
230 Tempo=1 
240
250 ENVELOPE1,1,0,0,0,0,0,0,126,-2,0,-5,126,100
260 ENVELOPE2,4,0,0,1,1,0,1,63,-1,0,-10,126,100
270 ENVELOPE3,1,0,0,0,0,0,0,126,-4,-1,-4,126,100
280
290 REM Channel 1
300 FOR N=1 TO C1
310 PROCChan
320 Chan1(1,N)=Chan
330 IF Note$="R" Env=0 ELSE IF N=5 OR N=11 OR N=25 OR N=30 OR N=36 OR N=42 Env=2 ELSE Env=1
340 Chan1(2,N)=Env
350 PROCAnalyseNote
360 Chan1(3,N)=Pitch
370 Chan1(4,N)=Duration
380 NEXT N
390 PRINT"Channel 1 Complete"
400
410 REM Channel 2
420 FOR N=1 TO C2
430 PROCChan
440 Chan2(1,N)=Chan
450 IF Note$="R" Env=0 ELSE Env=3
460 Chan2(2,N)=Env
470 PROCAnalyseNote
480 Chan2(3,N)=Pitch
490 Chan2(4,N)=Duration
500 NEXT N
510 PRINT"Channel 2 Complete"
520
530 REM Channel 3
540 FOR N=1 TO C3
550 PROCChan
560 Chan3(1,N)=Chan
570 IF Note$="R" Env=0 ELSE Env=1
580 Chan3(2,N)=Env
590 PROCAnalyseNote
600 Chan3(3,N)=Pitch
610 Chan3(4,N)=Duration
620 NEXT N
630 PRINT"Channel 3 Complete"
640
650 Ch1=0:Ch2=0:Ch3=0
660
670 REPEAT
680 IF ADVAL(-6)>0 AND Ch1<C1 Ch1=Ch1+1:SOUNDChan1(1,Ch1)+1,Chan1(2,Ch1),Chan1(3,Ch1),Chan1(4,Ch1)*Tempo
690 IF ADVAL(-7)>0 AND Ch2<C2 Ch2=Ch2+1:SOUNDChan2(1,Ch2)+2,Chan2(2,Ch2),Chan2(3,Ch2),Chan2(4,Ch2)*Tempo
700 IF ADVAL(-8)>0 AND Ch3<C3 Ch3=Ch3+1:SOUNDChan3(1,Ch3)+3,Chan3(2,Ch3),Chan3(3,Ch3),Chan3(4,Ch3)*Tempo
710 UNTIL Ch1=C1 AND Ch2=C2 AND Ch3=C3
720
730 END
740
750 DEF PROCChan
760 READ Note$:IF LEFT$(Note$,1)="&" Chan=EVAL(Note$):READ Note$,Duration ELSE Chan=0:READ Duration
770 ENDPROC
780
790 DEF PROCAnalyseNote
800 IF Note$="R" Pitch=255:ENDPROC
810 IF LEN(Note$)<2 OR LEN(Note$)>3 THEN PRINT"ERROR IN DATA ";Note$:PRINT"Not e Number ";N:STOP
820 IF LEN(Note$)=2 THEN NoteName$=LEFT$(Note$,1) ELSE NoteName$=LEFT$(Note$,2 )
830 Octave=VAL(RIGHT$(Note$,1))
840 Pitch=Key+INSTR(Scale$,NoteName$)/3*4+(Octave-1)*48
850 IF Pitch<0 OR Pitch>255 THEN PRINT "ERROR IN PITCH DATA ";Note$;" Pitch = " ;Pitch:PRINT"Note Number ";N:STOP
860 ENDPROC
870
880 REM Channel 1
890 DATA &200,B2,2,A2,2,G#2,2,A2,2
900 DATA &200,C3,4,R,4,D3,2,C3,2,B2,2,C3,2
910 DATA &200,E3,4,R,4,F3,2,E3,2,D#3,2,E3,2
920 DATA &200,B3,2,A3,2,G#3,2,A3,2,B3,2,A3,2,G#3,2,A3,2
930 DATA &200,C4,8,A3,4,C4,2,G3,1,A3,1
940 DATA &200,B3,4,A3,4,G3,4,A3,2,G3,1,A3,1
950 DATA &200,B3,4,A3,4,G3,4,A3,2,G3,1,A3,1
960 DATA &200,B3,4,A3,4,G3,4,F#3,4
970 DATA &200,E3,8
980
990 REM Channel 2
1000 DATA &200,R,8
1010 DATA &200,A1,4,C2,4,C2,4,C2,4
1020 DATA &200,A1,4,C2,4,C2,4,C2,4
1030 DATA &200,A1,4,C2,4,C2,4,C2,4
1040 DATA &200,A1,4,C2,4,C2,4,C2,4 
1050 DATA &200,E1,4,B1,4,B1,4,B1,4 
1060 DATA &200,E1,4,B1,4,B1,4,B1,4 
1070 DATA &200,E1,4,B1,4,B1,4,B1,4 
1080 DATA &200,E1,8
1090
1100 REM Channel 3
1110 DATA &200,R,8
1120 DATA &200,R,4,E2,4,E2,4,E2,4
1130 DATA &200,R,4,E2,4,E2,4,E2,4
1140 DATA &200,R,4,E2,4,R,4,E2,4
1150 DATA &200,R,4,E2,4,E2,4,E2,4
1160 DATA &200,R,4,E2,4,E2,4,E2,4
1170 DATA &200,R,4,E2,4,E2,4,E2,4
1180 DATA &200,R,4,E2,4,R,8
1190 DATA &200,R,8

### Modifications, alterations and suggestions


635 Chan1(1,1)=&200:Chan2(1,1)=&200:Chan 3(1,1)=&200



685 PRINT;Chan1(1,Ch1)+1TAB(4)Chan1(2,Ch1)TAB(9)Chan1 (3,Ch1)TAB(14)Chan1(4,Ch1)*Tempo


### Saving the tune

1 REM PROGRAM 9.3
2 REM *SPOOL Routine To Put Sound
3 REM Data Onto TAPE or DISC
4 REM Include These Lines In
5 REM PROGRAM 9.2
6 REM Tempo=2 For DISC, 5 For TAPE
7
230 Tempo=2
664 Line=5000
665 PRINT"INSERT DISC OR TAPE then RETURN"
666 REPEAT:A=GET:UNTIL A=13
667 *SPOOL"TUNE"
680 IF ADVAL(-6)>0 AND Ch1<C1 Ch1=Ch1+1:SOUNDChan1(1,Ch1)+1,Chan1(2,Ch1),Chan1 (3,Ch1),Chan1(4,Ch1)*Tempo:PROCSpool1
690 IF ADVAL(-7)>0 AND Ch2<C2 Ch2=Ch2+ 1:SOUNDChan2(1,Ch2)+2,Chan2(2,Ch2),Chan2 (3,Ch2),Chan2(4,Ch2)*Tempo:PROCSpool2
700 IF ADVAL(-8)>0 AND Ch3<C3 Ch3=Ch3+ 1:SOUNDChan3(1,Ch3)+3,Chan3(2,Ch3),Chan3 (3,Ch3),Chan3(4,Ch3)*Tempo:PROCSpool3
715 *SPOOL 861
862 DEF PROCSpool1
863 PRINT;Line;" DATA ";Chan1(1,Ch1)+1
;",";Chan1(2,Ch1);",";Chan1(3,Ch1);",";C han1(4,Ch1)*Tempo
864 Line=Line+10
865 ENDPROC
866
867 DEF PROCSpool2
868 PRINT;Line;" DATA ";Chan2(1,Ch2)+1
;",";Chan2(2,Ch2);",";Chan2(3,Ch2);",";C han2(4,Ch2)*Tempo
869 Line=Line+10
870 ENDPROC
871
872 DEF PROCSpool3
873 PRINT;Line;" DATA ";Chan3(1,Ch3)+1
;",";Chan3(2,Ch3);",";Chan3(3,Ch3);",";C han3(4,Ch3)*Tempo
874 Line=Line+10
875 ENDPROC
876
10000 DATA -1,-1,-1,-1
10010
10020 REM These Lines Play the DATA
10030 RESTORE5000
10040 REPEAT
10050 READ Chan,Env,Pitch,Dur
10060 REM Set Divisor Equal to Tempo
10070 SOUNDChan,Env,Pitch,Dur/2 
10080 UNTIL Chan=-1


### More tunes to play

1 REM PROGRAM 9.4
2 REM Another 24 bars of Mozart's
3 REM Rondo Alla Turca
4 REM Insert These Lines into
5 REM PROGRAM 9.2
6
90 C1=168:C2=114:C3=114
275 ENVELOPE4,4,0,8,-8,0,1,1,126,-1,0,-2,126,100
305 IF N=47 OR N=129 RESTORE 890
306 IF N=153 RESTORE 979
330 IF Note$="R" Env=0 ELSE IF N=52 OR N=58 OR N=72 OR N=77 OR N=83 OR N=89 Env=2 ELSE Env=1
335 IF N=153 OR N=165 Env=4
345 IF N=153 OR N=165 Env=4
425 IF N=31 OR N=85 RESTORE 1000
426 IF N=98 RESTORE 1089
545 IF N=30 OR N=85 RESTORE 1110
546 IF N=98 RESTORE 1199
880 REM Channel 1
970 DATA &200,E3,8,E3,4,F3,4
971 DATA &200,G3,4,G3,4,A3,2,G3,2,F3,2,E3,2
972 DATA &200,D3,8,E3,4,F3,4
973 DATA &200,G3,4,G3,4,A3,2,G3,2,F3,2,E3,2
974 DATA &200,D3,8,C3,4,D3,4
975 DATA &200,E3,4,E3,4,F3,2,E3,2,D3,2,C3,2
976 DATA &200,B2,8,C3,4,D3,4
977 DATA &200,E3,4,E3,4,F3,2,E3,2,D3,2,C3,2
978 DATA &200,B2,8
979 DATA &200,C4,8,A3,4,B3,4
980 DATA &200,C4,4,B3,4,A3,4,G#3,4
981 DATA &200,A3,4,E3,4,F3,4,D3,4
982 DATA &200,C3,8,B2,6,A2,1,B2,1
983 DATA &200,A2,8
990 REM Channel 2
1080 DATA &200,E1,8,R,8
1081 DATA &200,C1,4,C2,4,E1,4,E2,4
1082 DATA &200,G1,8,R,8
1083 DATA &200,C1,4,C2,4,E1,4,E2,4
1084 DATA &200,G1,8,R,8
1085 DATA &200,C1,4,A1,4,C1,4,C2,4
1086 DATA &200,E1,8,R,8
1087 DATA &200,C1,4,A1,4,C1,4,C2,4
1088 DATA &200,E1,8,R,8
1089 DATA &200,F1,4,A1,4,A1,4,A1,4
1090 DATA &200,E1,4,A1,4,D1,4,F1,4
1091 DATA &200,C1,4,E1,4,D1,4,F1,4
1092 DATA &200,E1,4,E1,4,E1,4,E1,4
1093 DATA &200,A1,8
1100 REM Channel 3
1190 DATA &200,R,8,C3,4,D3,4
1191 DATA &200,E3,4,E3,4,R,8
1192 DATA &200,B2,4,G2,4,C3,4,D3,4
1193 DATA &200,E3,4,E3,4,R,8
1194 DATA &200,B2,8,A2,4,B2,4
1195 DATA &200,C3,4,C3,4,R,8
1196 DATA &200,G#2,4,E2,4,A2,4,B2,4
1197 DATA &200,C3,4,C3,4,R,8
1198 DATA &200,R,8
1199 DATA &200,R,4,D#2,4,D#2,4,D#2,4
1200 DATA &200,R,4,E2,4,R,4,B1,4
1201 DATA &200,R,4,A1,4,R,4,B1,4
1202 DATA &200,A1,4,A1,4,G#1,4,G#1,4
1203 DATA &200,A1,8



10 REM PROGRAM 9.5
20 REM Tschaikowsky's
30 REM Dance of the Sugar-plum Fairy 
40 REM Insert These Lines Into
50 REM PROGRAM 9.2
60
90 C1=104:C2=95:C3=86
230 Tempo=2
250 ENVELOPE1,6,0,0,0,0,0,0,126,-8,0,-8,126,94
260 ENVELOPE2,4,0,0,1,1,0,1,100,-10,-10,-10,100,70
270 ENVELOPE3,3,0,0,0,0,0,0,116,-8,0,-8,116,84
275 ENVELOPE4,6,0,0,1,1,0,1,100,-5,-5,-5,100,80
276 ENVELOPE5,1,0,0,1,1,0,1,100,-5,-1,-10,100,50
330 IF Note$="R" Env=0 ELSE IF N=C1 Env=5 ELSE IF N<17 Env=2 ELSE Env=1
450 IF Note$="R" Env=0 ELSE IF N=C2 Env=5 ELSE IF N>73 Env=4 ELSE Env=2
570 IF Note$="R" Env=0 ELSE IF N=C3 Env=5 ELSE IF N<68 Env=2 ELSE Env=3
870
880 REM Channel 1
890 DATA &200,R,4,E3,4,R,4,F#3,4
900 DATA &200,R,4,G3,4,R,4,D#3,4
910 DATA &200,R,4,E3,4,R,4,F#3,4
920 DATA &200,R,4,G5,2,E5,2,G5,4,F#5,4
930 DATA &200,D#5,4,E5,4,D5,2,D5,2,D5,4
940 DATA &200,B4,2,E5,2,C5,2,E5,2,B4,4,R,4
950 DATA &200,R,4,G4,2,E4,2,G4,4,F#4,4
960 DATA &200,B4,2,E5,2,C5,2,E5,2,B4,4,R,4
970 DATA &200,R,4,G4,2,E4,2,G4,4,F#4,4
980 DATA &200,C5,4,B4,4,G5,2,G5,2,G5,4
990 DATA &200,F#5,2,F#5,2,F#5,4,E5,2,E5,2,E5,4
1000 DATA &200,D#5,2,F#5,2,E5,2,F#5,2,D#5,4,R,4
1010 DATA &200,R,4,G5,2,E5,2,G5,4,F#5,4
1020 DATA &200,D#5,4,E5,4,D5,2,D5,2,D5,4
1030 DATA &200,C#5,2,C#5,2,C#5,4,C5,2,C5,2,C5,4
1040 DATA &200,B4,2,E5,2,C5,2,E5,2,B4,4,R,4
1050 DATA &200,R,4,E4,2,C#4,2,E4,4,D#4,4
1060 DATA &200,R,4,D4,2,B3,2,D4,4,C#4,4
1070 DATA &200,R,4,C4,2,A3,2,C4,4,B3,4
1080 DATA &200,R,4,B3,1,D#4,1,F#4,1,B4,1,E4,4,B2,4
1090
1100 REM Channel 2
1110 DATA &200,E2,4,G2,4,E2,4,A2,4
1120 DATA &200,E2,4,A#2,4,E2,4,A2,4
1130 DATA &200,E2,4,G2,4,E2,4,A2,4
1140 DATA &200,E2,4,A#2,4,E2,4,A2,4
1150 DATA &200,E2,4,B2,4,E2,4,C3,4
1160 DATA &200,E2,4,C#3,4,E2,4,D3,4
1170 DATA &200,E2,4,E3,4,E2,4,F#3,4
1180 DATA &200,E3,4,E3,4,E3,4,E2,1,D2,1,C2,1,B1,1
1190 DATA &200,A#1,4,C3,4,A1,4,C3,4
1200 DATA &200,G1,4,B2,4,F#1,4,A#2,4
1210 DATA &200,F#2,4,B2,4,F#2,4,C#3,4
1220 DATA &200,B1,4,C2,4,B1,4,B1,1,A1,1,G1,1,F#1,1
1230 DATA &200,E1,4,B2,4,E2,4,C3,4
1240 DATA &200,E2,4,C#3,4,E2,4,D3,4
1250 DATA &200,E2,4,E3,4,E2,4,F#3,4
1260 DATA &200,E3,4,E3,4,E3,4,G3,1,F#3,1,E3,1,D3,1 
1270 DATA &200,C#3,4,F#2,8,F#3,1,E3,1,D#3,1,C#3,1 
1280 DATA &200,B2,4,E2,8,E3,1,D3,1,C#3,1,B2,1 
1290 DATA &200,A2,4,D2,8,D3,1,C3,1,B2,1,A2,1
1300 DATA &200,G2,4,F#2,4,E2,4,B0,4
1310
1320 REM Channel 3
1330 DATA &200,R,4,B2,4,R,4,C3,4 
1340 DATA &200,R,4,C#4,4,R,4,C4,4
1350 DATA &200,R,4,B2,4,R,4,C3,4
1360 DATA &200,R,4,C#4,4,R,4,C4,4
1370 DATA &200,R,4,G2,4,R,4,A2,4
1380 DATA &200,R,4,C#4,4,R,4,C4,4
1390 DATA &200,R,4,G2,4,R,4,A2,4
1400 DATA &200,G3,4,A3,4,G3,4,R,4
1410 DATA &200,R,4,E2,4,R,4,D#2,4
1420 DATA &200,F#4,4,E4,4,A#4,2,A#4,2,A#4,2
1430 DATA &200,G#4,2,G#4,2,G#4,4,F#4,2,F#4,2,F#4,4
1440 DATA &200,B2,4,A#2,4,F#2,4,R,4
1450 DATA &200,R,4,G2,4,R,4,A2,4
1460 DATA &200,R,4,A#2,4,R,4,B2,4
1470 DATA &200,R,4,C#3,4,R,4,D#4,4
1480 DATA &200,G3,4,A3,4,G3,4,R,4
1490 DATA &200,R,4,A#3,2,F#3,2,A#3,4,A3,4
1500 DATA &200,R,4,G#3,2,E3,2,G#3,4,G3,4
1510 DATA &200,R,4,F#3,2,D3,2,F#3,4,G3,4
1520 DATA &200,R,4,A2,4,E2,4,B1,4


BUG???: Line 1300 gives error (Pitch B0)  (check calculation in line 840)


10 REM PROGRAM 9.6
20 REM John Philip Sousa's
30 REM The Liberty Bell March
40 REM Insert These Lines Into
50 REM PROGRAM 9.2
90 C1=174:C2=207:C3=173
250 ENVELOPE1,1,0,0,0,0,0,0,50,50,-2,- 2,50,126
260 ENVELOPE2,1,0,0,0,0,0,0,32,-8,-2,- 4,126,90
270 ENVELOPE3,1,0,0,0,0,0,0,16,-8,-2,- 4,126,90
275 ENVELOPE4,4,0,8,-8,0,1,1,110,0,0,- 10,110,110
276 ENVELOPE5,2,1,0,1,0,1,1,16,-8,-2,- 4,126,90
277 ENVELOPE6,1,1,0,1,0,1,1,32,-8,-2,- 4,126,90
305 IF N=65 RESTORE 930
330 IF Note$="R" Env=0 ELSE IF (N=1 OR N=78 OR N=93 OR N=108 OR N=162) Env=4 ELSE Env=1
425 IF N=79 RESTORE 2560
450 IF Note$="R" Env=0 ELSE IF N=C2-1 Env=1 ELSE IF N>78 Env=5 ELSE Env=3
545 IF N=71 RESTORE 3050
570 IF Note$="R" Env=0 ELSE IF N=130 Env=4 ELSE IF N=C3-1 Env=1 ELSE Env=2
880 REM Channel 1
890 DATA &200,F4,60,&1000,R,9
900
910
920 DATA C3,3
930 DATA &200,A2,6,A2,3,A2,3,G#2,3,A2,3
940 DATA &200,F3,6,C3,3,C3,6,A2,3
950 DATA &200,A#2,6,A#2,3,A#2,6,C3,3
960 DATA &200,D3,15,A#2,3
970 DATA &200,G2,6,G2,3,G2,3,F#2,3,G2, 3
980 DATA &200,E3,6,D3,3,D3,6,A#2,3
990 DATA &200,A2,6,A2,3,A2,6,A#2,3
1000 DATA &200,C3,15,C3,3
1010 DATA &200,A2,6,A2,3,A2,3,G#2,3,A2,3
1020 DATA &200,A3,6,F3,3,F3,6,C3,3
1030 DATA &200,B2,6,G3,3,G3,6,G3,3
1040 DATA &200,G3,15,F3,3
1050 DATA &200,E3,6,G3,3,G3,3,F#3,3,G3,3
1060 DATA &200,D3,6,G3,3,G3,3,F#3,3,G3,3
1070 DATA &200,C3,6,B2,3,C3,6,B2,3
1080 DATA &200,C3,9,C3,9
1090 REM 2nd Part
1100 DATA &200,A2,3,G#2,3,A2,3,D3,6,C3,3
1110 DATA &200,A2,9,F2,9
1120 DATA &100,D2,9,G2,9
1130 DATA &100,F2,15,F2,3
1140 DATA &200,G2,3,A2,3,A#2,3,E3,6,D3,3
1150 DATA &200,C3,9,F3,9
1160 DATA &200,E3,9,D3,9
1170 DATA &200,C3,15,C3,3
1180 DATA &200,D3,6,D3,2,E3,1,D3,3,C#2,3,D3,3
1190 DATA &200,E3,9,E3,9
1200 DATA &200,F3,6,F3,2,A3,1,G3,3,F3,3,G3,3
1210 DATA &200,A3,15,A3,2,A3,1
1220 DATA &200,G3,6,F3,3,D3,6,A#2,3
1230 DATA &200,A2,9,F2,9
1240 DATA &200,G2,9,E2,9
1250 DATA &200,F2,12,R,6
2500
2510 REM Channel 2
2520 DATA &200,F2,6,E2,3,D#2,6,D2,3 
2530 DATA &100,C2,6,B1,3,A#1,6,A1,3
2540 DATA &100,G1,3,A1,3,A#1,3,A1,6,G1,3
2550 DATA &100,C1,6,R,12
2560 DATA &200,F1,6,F2,3,F2,6,F2,3
2570 DATA &200,F1,6,F2,3,F2,6,F2,3
2580 DATA &200,E1,6,F1,3,G1,6,F1,3
2590 DATA &200,E1,6,D1,3,C1,6
2600 DATA &200,C1,6,A#1,3,A#1,6,A#1,3
2610 DATA &200,C1,6,A#1,3,A#1,6,A#1,3
2620 DATA &200,F1,6,G1,3,A1,6,G1,3
2630 DATA &200,F1,6,E1,3,D1,6,C1,3
2640 DATA &200,F1,6,F2,3,F2,6,F2,3
2650 DATA &200,F1,6,F2,3,F2,6,F2,3
2660 DATA &200,D1,6,E1,3,F1,6,E1,3
2670 DATA &200,D1,6,C1,3,B0,6,A1,3
2680 DATA &200,G1,6,E2,3,E2,6,E2,3
2690 DATA &200,G1,6,F2,3,F2,6,F2,3
2700 DATA &200,C2,6,T1,3,C2,6,G1,3
2710 DATA &200,C1,6,R,3,C2,6,R,3
2720 REM 2nd Part
2730 DATA &200,F1,6,A1,3,C1,6,A1,3
2740 DATA &200,F1,6,A1,3,C1,6,A1,3
2750 DATA &100,A#1,6,F1,3,C1,6,E1,3
2760 DATA &100,F1,6,A1,3,A1,6,A1,3
2770 DATA &200,E1,6,A#1,3,C1,6,A#1,3
2780 DATA &200,F1,6,A1,3,D1,6,G#1,3
2790 DATA &200,C1,4,F1,2,G1,3,D1,4,F1,2,G1,3
2800 DATA &200,C1,6,G1,3,G1,6,81,3
2810 DATA &200,B0,6,B1,3,B1,6,B1,3
2820 DATA &200,C#1,6,A1,3,A1,6,A1,3
2830 DATA &200,D1,6,A1,3,D1,6,A#1,3
2840 DATA &200,C1,6,A1,3,A1,6,A1,3
2850 DATA &200,G1,6,A#1,3,A#1,6,A#1,3
2860 DATA &200,C1,6,A1,3,A1,6,A1,3
2870 DATA &200,E1,6,A#1,3,C1,6,A#1,3
2880 DATA &200,F1,6,R,3,F1,6,R,3
2890
3000 REM Channel 3
3010 DATA &200,F3,6,E3,3,D#3,6,D3,3
3020 DATA &100,C3,6,B2,3,A#2,6,A2,3
3030 DATA &100,G2,3,A2,3,A#2,3,A2,6,G2,3
3040 DATA &100,C2,6,R,12
3050 DATA &200,F2,6,C2,3,C2,6,C2,3
3060 DATA &200,F2,6,C2,3,C2,6,C2,3
3070 DATA &200,G2,6,G2,3,G2,6,G2,3
3080 DATA &200,G2,15,R,3
3090 DATA &200,G1,6,C2,3,C2,6,C2,3
3100 DATA &200,G1,6,C2,3,C2,6,C2,3
3110 DATA &200,F2,6,F2,3,F2,6,G2,3
3120 DATA &200,A2,15,A2,3
3130 DATA &200,F2,6,C2,3,C2,6,C2,3
3140 DATA &200,F2,6,C2,3,C2,6,C2,3
3150 DATA &200,D2,9,B1,9
3160 DATA &200,B1,6,C2,3,D2,6,R,3
3170 DATA &200,G2,6,C2,3,C2,6,C2,3
3180 DATA &200,G2,6,B1,3,B1,6,B1,3
3190 DATA &200,E2,6,R,3,G1,6,R,3
3200 DATA &200,E2,6,R,3,E2,6,R,3
3210 REM 2nd Part
3220 DATA &200,R,18
3230 DATA &200,F4,54
3240
3250
3260 DATA &200,R,6,C2,3,R,6,C2,3
3270 DATA &200,R,6,A1,3,R,6,G#1,3
3280 DATA &200,G2,9,F2,9
3290 DATA &200,R,6,C2,3,C2,6,C2,3
3300 DATA &200,F2,6,D2,3,D2,6,D2,3
3310 DATA &200,R,6,C#2,3,C#2,6,C#2,3
3320 DATA &200,R,6,D2,3,R,6,D2,3
3330 DATA &200,R,6,E2,3,E2,6,E2,3
3340 DATA &200,R,6,G2,3,G2,6,G2,3
3350 DATA &200,R,6,C2,3,C2,6,C2,3
3360 DATA &200,R,6,C2,3,C2,6,C2,3
3370 DATA &200,F2,6,R,3,F2,6,R,3

BUG???: Line 2670 B0 error in pitch data (check calculation in line 840)


## Chapter 10

5 REM Anarchy
10 REPEAT
20 SOUND RND(3),RND(15)-16,RND(255),RND(10)
30 UNTIL FALSE



### Aspects of a composition

10 REM PROGRAM 10.1
20 REM Computer Composition 
30 REM Based on Rules
40
50 PROCSetup
60
70 NoOfBars=4
80 Count=0
90
100 FOR B=1 TO NoOfBars
110 PRINT"Composing Bar ";B
120 PROCBar
130 NEXT B
140
150 PROCPlay
160
170 PRINT"Press SPACE For Another Tune"
180 PRINT"Press ""R"" For A Replay"
190
200 REPEAT
210 *FX15,1
220 Key$=GET$
230 UNTIL (Key$=" " OR Key$="R")
240 IF Key$="R" GOTO 150 ELSE GOTO 80
250
260 END
270
280 DEF PROCSetup
290 Scale$=" C C#D D#E F F#GG#A A#B"
300
310 ENVELOPE1,4,0,1,0,1,1,0,126,-8,0,- 8,126,80
320 Key=1
330 Tempo=2
340
350 DIM Tune(2,129), Tune$(129)
360
370 DIM NotesToChooseFrom$(15)
380 FOR S%=1 TO 15
390 READ Note$
400 NotesToChooseFrom$(S%)=Note$
410 NEXT S%
420 ENDPROC
430
440 DATA G1,A1,B1,C2,D2,E2,F2,G2,A2,B2,C3,D3,E3,F3,G3
450
460 DEF PROCChooseNote
470 Note=RND(15)
480 Note$=NotesToChooseFrom$(Note)
490 ENDPROC
500
510 DEF PROCPlay
520 FOR P=1 TO Count
530 PRINTTune$(P),Tune(2,P)*Tempo
540 SOUND1,1,Tune(1,P),Tune(2,P)*Tempo
550 NEXT P
560 ENDPROC
570
580 DEF PROCAnalyseNote
590 IF LEN(Note$)<2 OR LEN(Note$)>3 THEN PRINT"ERROR IN DATA ";Note$:STOP
600 IF LEN(Note$)=2 THEN NoteName$=LEFT$(Note$,1) ELSE NoteName$=LEFT$(Note$,2)
610 PositionInScale=INSTR(Scale$,NoteName$)/3
620 Octave=VAL(RIGHT$(Note$,1))
630 ENDPROC
640
650 DEF PROCCalculatePitch
660 Pitch=Key+PositionInScale*4+(Octave-1)*48
670 IF Pitch<0 OR Pitch>255 THEN PRINT"ERROR IN PITCH DATA ";Note$;" Pitch = " ;Pitch:STOP
680 ENDPROC
690
700 DEF PROCBar
710 DurationSoFar=0
720 REPEAT
730 Count=Count+1
740 REPEAT
750 PROCChooseNote
760 PROCAnalyseNote
770 PROCRules
780 UNTIL NoteOK
790 LastNote=Note
800 PROCCalculatePitch
810 Tune(1,Count)=Pitch:Tune$(Count)=Note$
820 PROCDur
830 Tune(2,Count)=Dur
840 DurationSoFar=DurationSoFar+Dur
850 UNTIL DurationSoFar=16
860 ENDPROC
870
880 DEF PROCDur
890 REPEAT
900 Dur=2^RND(2)
910
920 REM Set Last Note To Semibreve
930 IF B=NoOfBars Dur=16
940
950 UNTIL DurationSoFar+Dur<=16
960 ENDPROC
970
980 DEF PROCRules
990 NoteOK=FALSE
1000
1010 REM Set First Note
1020 IF Count=1 AND NOT(NoteName$="C" OR NoteName$="G" OR NoteName$="E") ENDPROC
1030
1040 REM Make a "B" Move up to a "C" 
1050 IF Count>1 AND LEFT$(Tune$(Count-1),1)="B" Note=LastNote+1:Note$=NotesToChooseFrom$(Note):PROCAnalyseNote
1060
1070 REM Restrict Jumps To 4 Notes
1080 IF Count>1:IF ABS(LastNote-Note)>4 ENDPROC
1090
1100 REM Set Last Bar
1110 IF B=NoOfBars AND NoteName$<>"C" ENDPROC
1120
1130 NoteOK=TRUE
1140 ENDPROC


### Experimenting with the program


1 REM PROGRAM 10.2
2 REM Computer Compositions with
3 REM Fixed Rhythm Pattern
4 REM Insert in PROGRAM 10.1
85 RESTORE 920 
890 READ Dur
900 ENDPROC
910
920 DATA 2,2,2,2,4,4
930 DATA 2,2,4,8
940 DATA 2,2,4,2,2,4
950 DATA 4,4,8
960
970
980 DEF PROCRules
990 NoteOK=FALSE
1110 IF Count=19 AND NoteName$<>"C" END

BUG???: Runs once and then just quits and never runs again?


### Note analysis in composition


10 REM PROGRAM 10.3
20 REM Computer Compositions
30 REM Based Upon Note Analysis
40
50 MODE 7
60 REM Page Mode Off
70 VDU15
80 ENVELOPE1,4,0,1,0,1,1,0,126,-8,0,-8,120,90
90
100 DIM Tune$(238),Dur%(238),F1%(36)
110 Key%=37
120 Scale$=" A1 A#1B1 C1 C#1D1 D#1E1F1 F#1G1 G#1A2 A#2B2 C2 C#2D2 D#2E2 F2 F #2G2 G#2A3 A#3B3 C3 D#3D3 D#3E3 F3 F#3G3G#3"
130
140 PROCGetTune
150 PROCNewScale
160 PROCAnalyseTune
170 PROCCalcPercentages
180 PROCPrint
190
200 INPUT"Enter 'LAST BUT ONE' and 'LAST NOTE' in terms of note number in New Scale",Penult%,LastNote%
210 PRINT'"Press 'S' to STOP"'"Enter s earch depth (1/2/3) - This may be altered as the program is running?":Play%=GET
220
230 D%=0
240 REPEAT
250 PROCGetNote
260 PROCPlay
270 PL%=INKEY(0):IF PL%>48 AND PL%<52 THEN Play%=PL%
280 UNTIL PL%=83
290
300 END
310
320 DEFPROCGetTune
330 PRINT"Reading in Tune For Analysis"'
340 REM RESTORE To Required Tune
350 RESTORE 1810
360
370 Count%=0
380 REPEAT
390 Count%=Count%+1
400 READ Note$,Dur:IF Note$="X" GOTO 430
410 Tune$(Count%)=Note$
420 Dur%(Count%)=Dur
430 UNTIL Note$="X"
440
450 TuneLength%=Count%
460 ENDPROC
470
480 DEFPROCNewScale
490 PRINT"Calculating New Scale"'
500
510 FOR Note%=1 TO TuneLength%
520 Pos%=INSTR(Scale$,Tune$(Note%))/3
530 F1%(Pos%)=F1%(Pos%)+1
540 NEXT Note%
550
560 Scale2$=" "
570
580 FOR Note%=1 TO 36
590 IF F1%(Note%)>0 THEN Scale2$=Scale2$+MID$(Scale$,Note%*3,3)
600 NEXT Note%
610
620 PRINT"New Scale = ";Scale2$'
630 ScaleLength%=(LEN(Scale2$)-2)/3
640 PRINT"Scale length = ";ScaleLength%'
650
660 DIM F2%(ScaleLength%,ScaleLength%),F3%(ScaleLength%,ScaleLength%,ScaleLength%)
670
680 REM Reset F1% Array
690 FOR C%=1 TO 36
700 F1%(C%)=0
710 NEXT C%
720 ENDPROC
730
740 DEFPROCAnalyseTune
750 PRINT"Analysing Tune..."'
760 FOR Note%=1 TO TuneLength%
770 Pos1%=INSTR(Scale2$,Tune$(Note%))/3
780 F1%(Pos1%)=F1%(Pos1%)+1
790 IF Note%>TuneLength%-1 THEN GOTO 820
800 Pos2%=INSTR(Scale2$,Tune$(Note%+1))/3
810 F2%(Pos1%,Pos2%)=F2%(Pos1%,Pos2%)+1
820 IF Note%>TuneLength%-2 THEN GOTO 850
830 Pos3%=INSTR(Scale2$,Tune$(Note%+2))/3
840 F3%(Pos1%,Pos2%,Pos3%)=F3%(Pos1%,Pos2%,Pos3%)+1
850 NEXT Note%
860 ENDPROC
870
880 DEFPROCCalcPercentages
890
900 PRINT"Calculating First Order Frequency..."
910 Sum1%=0
920 FOR n1%=1 TO ScaleLength%
930 Sum1%=Sum1%+F1%(n1%)
940 NEXT n1%
950 FOR n1%=1 TO ScaleLength%
960 F1%(n1%)=F1%(n1%)*100/Sum1%
970 NEXT n1%
980
990 PRINT"Calculating Second Order Frequency..."
1000 FOR n1%=1 TO ScaleLength%
1010 Sum2%=0
1020 FOR n2%=1 TO ScaleLength%
1030 Sum2%=Sum2%+F2%(n1%,n2%)
1040 NEXT n2%
1050 IF Sum2%>0 THEN FOR n2=1 TO ScaleLength%:F2%(n1%,n2)=F2%(n1%,n2)*100/Sum2% :NEXT n2
1060 NEXT n1%
1070
1080 PRINT"Calculating Third Order Frequency..."
1090 FOR n1%=1 TO ScaleLength%
1100 FOR n2%=1 TO ScaleLength%
1110 Sum3%=0
1120 FOR n3%=1 TO ScaleLength%
1130 Sum3%=Sum3%+F3%(n1%,n2%,n3%)
1140 NEXT n3%
1150 IF Sum3%>0 THEN FOR n3=1 TO ScaleLength%:F3%(n1%,n2%,n3)=F3%(n1%,n2%,n3)*100/Sum3%:NEXT n3
1160 NEXT n2%
1170 NEXT n1%
1180 ENDPROC
1190
1200 DEF PROCPrint
1210 PRINT'"Do You Want a Printout (Y/N)?"
1220 Ans$=GET$:IF Ans$="N" THEN PRINT:ENDPROC ELSE IF Ans$<>"Y" THEN 1220
1230
1240 FOR n1%=1 TO ScaleLength%
1250 IF F1%(n1%)>0 THEN PRINTMID$(Scale2$,n1%*3,2);"...";F1%(n1%)
1260 NEXT n1%
1270
1280 FOR n1%=1 TO ScaleLength%
1290 FOR n2%=1 TO ScaleLength%
1300 IF F2%(n1%,n2%)>0 THEN PRINTMID$(Scale2$,n1%*3,2);"-";MID$(Scale2$,n2%*3,2 );"...";F2%(n1%,n2%)
1310 NEXT n2%
1320 NEXT n1%
1330
1340 FOR n1%=1 TO ScaleLength%
1350 FOR n2%=1 TO ScaleLength%
1360 FOR n3%=1 TO ScaleLength%
1370 IF F3%(n1%,n2%,n3%)>0 THEN PRINTMID$(Scale2$,n1%*3,2);"-";MID$(Scale2$,n2% *3,2);"-";MID$(Scale2$,n3%*3,2);"...";F3 %(n1%,n2%,n3%)
1380 NEXT n3%
1390 NEXT n2%
1400 NEXT n1%
1410 PRINT
1420
1430 ENDPROC
1440
1450 DEFPROCGetNote
1460 Dice%=RND(100)
1470 Note%=0:Sum%=0
1480
1490 REPEAT
1500 Note%=Note%+1
1510
1520 REM In Case a Note Has Never
1530 REM Followed a Particular
1540 REM Sequence of Notes
1550 IF Note%>ScaleLength% THEN Note%=RND(ScaleLength%):Sum%=Dice%
1560
1570 REM Third Order
1580 IF Play%=51 THEN Sum%=Sum%+F3%(Pen ult%,LastNote%,Note%)
1590
1600 REM Second Order
1610 IF Play%=50 THEN Sum%=Sum%+F2%(LastNote%,Note%)
1620
1630 REM First Order
1640 IF Play%=49 THEN Sum%=Sum%+F1%(Note%)
1650 UNTIL Sum%>=Dice%
1660
1670 Note$=MID$(Scale2$,Note%*3,3)
1680 Penult%=LastNote%:LastNote%=Note%
1690 PRINTNote$;TAB(12)"Depth = ";CHR$Play%
1700 ENDPROC
1710
1720 DEFPROCPlay
1730 Position%=(INSTR(Scale$,Note$))/3
1740 Note%=Key%+(Position%*4)
1750 SOUND1,1,Note%,Dur%(D%)
1760 D%=D%+1
1770 IF D%>TuneLength% D%=0
1780 ENDPROC
1790
1800 REM Ode To Joy - Beethoven
1810 DATA E2,8,E2,8,F2,8,G2,8,G2,8,F2,8 ,E2,8,D2,8,C2,8,C2,8,D2,8,E2,8,E2,12
1820 DATA D2,4,D2,16,E2,8,E2,8,F2,8,G2, 8,G2,8,F2,8,E2,8,D2,8,C2,8,C2,8,D2,8
1830 DATA E2,8,D2,12,C2,4,C2,16,D2,8,D2 ,8,E2,8,C2,8,D2,8,E2,4,F2,4,E2,8,C2,8
1840 DATA D2,8,E2,4,F2,4,E2,8,D2,8,C2,8 ,D2,8,G1,16,E2,8,E2,8,F2,8,G2,8,G2,8
1850 DATA F2,8,E2,8,D2,8,C2,8,C2,8,D2,8 ,E2,8,D2,12,C2,4,C2,8,X,0
1860
1870 REM Jesu, Joy - Bach
1880 DATA G1,6,A2,6,B2,6,D2,6,C2,6,C2,6,E2,6,D2,6,D2,6,G2,6,F#2,6,G2,6,D2,6 
1890 DATA B2,6,G1,6,A2,6,B2,6,C2,6,D2,6,E2,6,D2,6,C2,6,B2,6,A2,6,B2,G1,6
1900 DATA F#1,6,G1,6,A2,6,D1,6,F#1,6,A2,6,C2,6,B2,6,A2,6,B2,6,G1,6,A2,6,B2,6 
1910 DATA D2,6,C2,6,C2,6,E2,6,D2,6,D2,6,82,6,F#2,6,G2,6,D2,6,B2,6,G1,6,A2,6
1920 DATA B2,6,E1,6,D2,6,C2,6,B2,6,A2,6,G1,6,D1,6,G1,6,F#1,6,G1,18,X,0
1930
1940 REM Irish Jig
1950 DATA D2,3,B2,3,G1,3,G1,3,D1,3,G1,3 ,G1,3,B2,3,G1,3,B2,3,D2,3,C2,3,B2,3
1960 DATA C2,3,A2,3,A2,3,E1,3,A2,3,A2,3 ,C2,3,A2,3,C2,3,E2,3,D2,3,C2,3,B2,3
1970 DATA G1,3,G1,3,D1,3,G1,3,G1,3,B2,3 ,G1,3,B2,3,D2,3,C2,3,B1,3,C2,3,B1,3
1980 DATA C2,3,A2,3,D2,3,C2,3,B2,3,G1,3 ,D2,3,G2,3,B3,3,A3,3,G2,3,F#2,3,D2,3
1990 DATA F#2,3,F#2,3,D2,3,F#2,3,F#2,3, D2,3,F#2,3,A3,3,G2,3,F#2,3,E2,3,G2,3
2000 DATA G2,3,D2,3,G2,3,G2,3,C2,3,G2,3 ,G2,3,B2,3,G2,3,G2,3,C2,3,B2,3,C2,3
2010 DATA A2,3,D2,3,C2,3,B2,3,G1,3,G1,3 ,G1,6,X,0


## Chapter 11
### A three-part computer composition


10 REM PROGRAM 11.1
20 REM Computer Composition
30 REM In 3-Part Harmony
40
50 MODE7
60
70 FOR X%=0 TO 1:PRINTTAB(0,X%)CHR$141;CHR$133;TAB(6)"3-PART HARMONY COMPOSITION":NEXT X%
80 PRINTTAB(0,2)CHR$131;"Channel 1";TAB(13);"Channel 2";TAB(26);"Channel 3"
90
100 FOR Col=3 TO 24
110 PRINTTAB(0,Col);CHR$(129+Col MOD 6);
120 NEXT Col
130
140 REM Set text Window
150 VDU28,1,24,39,4
160
170 DIM Dice%(4),Key$(15)
180 Key=1
190 Tempo%=1
200 Scale$=" C C#D D#E F F#GG#A A#B"
210
220 REM Chinese Sticks
230 ENVELOPE1,1,0,0,0,0,0,0,126,-10,-5 ,-2,126,100
240
250 REM Slow Attack
260 ENVELOPE2,1,0,0,0,0,0,0,10,-1,0,-1,126,100
270
280 REM Vibrato
290 ENVELOPE3,4,0,1,0,2,1,0,126,-10,-4 ,-4,126,100
300 Env1=3:Env2=3:Env3=3
310
320 PROCSetScale
330 PROCDuration
340
350 REPEAT
360 IF ADVAL(-6)>0 PROCPlay1
370 IF ADVAL(-7)>0 PROCPlay2
380 IF ADVAL(-8)>0 PROCPlay3
390 UNTIL FALSE
400 END
410
420 DEF PROCSetScale
430
440 REM RESTORE To Required Scale
450 RESTORE 530
460
470 FOR I%=0 TO 15
480 READ Key$(I%)
490 NEXT I%
500 ENDPROC
510
520 REM Hornpipe
530 DATA C2,E2,G2,C3,E3,G3,C4,G3,A3,F3,D3,A2,F2,D2,F2,A2 540
550 REM Chinese
560 DATA F#2,G#2,A#2,C#2,D#2,F#3,G#3,A #3,C#3,D#3,F#2,G#2,A#2,C#2,D#2,F#2
570
580 REM Minor Key
590 DATA A#3,D3,G2,C2,D#2,G2,C3,G#3,G3,C4,D#3,G#3,C4,D3,D#3,G#3
600
610 REM Minstrel
620 DATA B2,G2,D3,G2,A3,E3,C4,A2,C3,A2 ,E3,C3,G3,D3,G3,B2
630
640 REM Minstrel 2
650 DATA F3,A3,G3,C2,E3,G2,C2,G2,E2,C3 ,A2,G3,C3,A#2,G2,F2
660
670 DEF PROCDuration
680
690 REM GOTO Required Durations
700 REM See Text For Explanation
710 GOTO 770
720
730 REM Fast (Chinese)
740 X1=3:Y1=0:Dotted1=1:X2=1:Y2=2:Dotted2=9:X3=1:Y3=1:Dotted3=9:GOTO 820
750
760 REM Mad Hornpipe
770 X1=1:Y1=1:Dotted1=9:X2=1:Y2=1:Dotted2=9:X3=1:Y3=1:Dotted3=9:GOTO 820
780
790 REM Minstrel
800 X1=1:Y1=3:Dotted1=1:X2=2:Y2=3:Dott
ed2=1:X3=1:Y3=5:Dotted3=1:GOTO 820
810
820 ENDPROC
830
840 DEF PROCPlay1
850 PROCRollDice
860 PROCGetNote
870 D=1:IF RND(16)<Dotted1 THEN D=1.5
880 IF X1=1 THEN Dur%=2^Y1*D
890 IF X1>1 THEN Dur%=2^(RND(X1)+Y1)*D
900 SOUND1,Env1,Pitch%,Dur%*Tempo%
910 PROCPrint(3)
920 ENDPROC
930
940 DEF PROCPlay2
950 PROCRollDice
960 PROCGetNote
970 D=1:IF RND(16)<Dotted2 THEN D=1.5
980 IF X2=1 THEN Dur%=2^Y1*D
990 IF X2>1 THEN Dur%=2^(RND(X1)+Y1)*D
1000 SOUND2,Env2,Pitch%,Dur%*Tempo%
1010 PROCPrint(15)
1020 ENDPROC
1030
1040 DEF PROCPlay3
1050 PROCRollDice
1060 PROCGetNote
1070 D=1:IF RND(16)<Dotted3 THEN D=1.5
1080 IF X3=1 THEN Dur%=2^Y3*D
1090 IF X3>1 THEN Dur%=2^(RND(X3)+Y3)*D
1100 SOUND3,Env3,Pitch%-48,Dur%*Tempo%
1110 PROCPrint(28)
1120 ENDPROC
1130
1140 DEF PROCRollDice
1150 Chance%=RND(100)
1160
1170 REM This Sets the Random Factor
1180 IF Chance%<84 Roll=1 ELSE IF Chance%<88 Roll=2 ELSE IF Chance%<92 Roll=3 ELSE IF Chance%<96 ROLL=4 ELSE Roll=5
1190
1200 IF Roll=1 Dice%(0)=RND(4)-1 ELSE PROCRoll
1210 PROCAddRolls
1220 ENDPROC
1230
1240 DEF PROCRoll
1250 FOR I%=0 TO Roll-1
1260 Dice%(I%)=RND(4)-1
1270 NEXT I%
1280 ENDPROC
1290
1300 DEF PROCAddRolls
1310 Note%=0
1320 FOR I%=0 TO 4
1330 Note%=Note%+Dice%(I%)
1340 NEXT I%
1350 ENDPROC
1360
1370 DEF PROCPrint(Tab)
1380 PRINTTAB(Tab)Key$(Note%);"-";Dur%*Tempo%;
1390 ENDPROC
1400
1410 DEF PROCGetNote
1420 IF LEN(Key$(Note%))=2 THEN NoteName$=LEFT$(Key$(Note%),1) ELSE NoteName$=L EFT$(Key$(Note%),2)
1430 Octave%=VAL(RIGHT$(Key$(Note%),1))
1440 PositionInScale%=(INSTR(Scale$,NoteName$))/3
1450 Pitch%=Key+PositionInScale%*4+(Octave%-1)*48
1460 IF Pitch%<0 OR Pitch%>255 PRINT"ERROR IN PITCH DATA ";Key$(Note%);" Pitch = ";Pitch%:STOP
1470 ENDPROC


### Experimenting with the program
All the variable parameters and DATA statements can be altered and adjusted to produce an almost infinite range of sounds. Much of it will be music but with extreme settings, especially of the duration parameters, the results will be disjointed.
If you enter: 

1155 Chance%=80 

and then:

1155 Chance%=100
you will be able to hear and observe the results of rolling only one dice and then of rolling all five. You can add values in between, to simulate rolling any specific number. If you temporarily blank out PROCPrint, eg by adding:

1375 ENDPROC

 and add:

1345 PRINT Note%

### Using chords as a compositional base

10 REM PROGRAM 11.2
20 REM Computer Composition
30 REM Based on Chord Sequences
40
50 MODE7
60
70 Scale$=" C C#D D#E F F#GG#A A#B"
80 ChordRange$=" M 7 9 min min6min7min9maj6maj7aug dim"
90
100 DIM NotesToChooseFrom$(11,6)
110
120 REM RESTORE To Requied Data
130 RESTORE 220
140 READ NoOfChords%
150
160 DIM Melody$(NoOfChords%)
170
180 FOR Tune=1 TO NoOfChords%
190 READ Melody$(Tune)
200 NEXT Tune
210
220 DATA 12
230 DATA C7,C7,C7,C7,F7,F7,C7,C7,G7,F7,C7,G7
240
250 DATA 12
260 DATA C7,C9,C7,C9,F7,F9,C7,C9,G9,F9,C9,G7
270
280 DATA 32
290 DATA Cmin,Cmin,G7,G7,G7,G7,Cmin
300 DATA Cmin,Cmin,Cmin,G7,G7,G7,G7
310 DATA Cmin,Cmin,Fmin,Fmin,Cmin,Cmin
320 DATA G7,G7,Cmin,Cmin,Fmin,Fmin
330 DATA Cmin,Cmin,G7,G7,Cmin,Cmin
340
350 DATA 16
360 DATA Amin7,D7,Gmaj6,Emin6,Gmin9,C7
370 DATA Fmaj7,Dmin6,Fmin7,G#min6
380 DATA Gmaj6,D#M,Cmin6,D7,Bmin,E7
390
400 RESTORE 1470
410 FOR N=1 TO 11
420 FOR C=1 TO 6
430 READ NotesToChooseFrom$(N,C)
440 NEXT C
450 NEXT N
460
470 ENVELOPE1,4,0,1,0,1,1,0,32,-2,0,-4,126,100
480 ENVELOPE2,1,0,0,0,0,0,0,126,-4,-1,-4,126,100
490 ENVELOPE3,4,0,0,0,0,0,0,106,-1,0,-1,106,80
500 Env1%=2:Env2%=2:Env3%=3
510
520 PRINT''
530 PRINT"Please Enter Number of Beats in Bar"
540 INPUT NoOfBeats%
550 PRINT"Please Enter Tempo (2 or greater)"
560 INPUT Tempo1%
570 Tempo%=Tempo1%
580
590 PRINT"Do You Want Rhythm Variation (Y/N)"
600 INPUT Sync$
610 IF Sync$="Y" OR Sync$="y" Sync=TRUE ELSE Sync=FALSE 620
630 Comp=0
640 REPEAT
650
660 Comp=Comp+1
670 Col=128+(Comp MOD7)
680 PRINTTAB(2,10)CHR$Col;CHR$141;"Composing Opus 1 Variation ";Comp
690 PRINTTAB(2,11)CHR$Col;CHR$141;"Composing Opus 1 Variation ";Comp
700
710 FOR T%=1 TO NoOfChords%
720 SyncPoint=RND(4)
730 FOR Beat%=1 TO NoOfBeats%*2
740
750 IF Sync PROCSync
760 PROCPlay
770
780 NEXT Beat%
790 NEXT T%
800 UNTIL FALSE
810
820 END
830
840 DEF PROCPlay
850
860 PROCAnalyseChord
870 PROCGetNote(Note1$)
880 PROCPlayChord(&101,Env1%)
890 PROCGetNote(Note2$)
900 PROCPlayChord(&102,Env2%)
910 PROCBass(Key%+4)
920
930 ENDPROC
940
950 DEF PROCAnalyseChord
960 Chord$=Melody$(T%)
970 IF MID$(Chord$,2,1)="#" Key$=LEFT$(Chord$,2):ChordType$=MID$(Chord$,3) ELSE Key$=LEFT$(Chord$,1):ChordType$=MID$(Chord$,2)
980 Key%=1+((INSTR(Scale$,Key$))/3-1)* 4
990 ChordNumber%=(INSTR(ChordRange$,ChordType$))/4
1000
1010 Choice1%=RND(6)
1020 REPEAT
1030 Choice2%=RND(6)
1040 UNTIL Choice2%<>Choice1%
1050
1060 Note1$=NotesToChooseFrom$(ChordNumber%,Choice1%)
1070 Note2$=NotesToChooseFrom$(ChordNumber%,Choice2%)
1080 ENDPROC
1090
1100 DEF PROCGetNote(Note$)
1110 IF LEN(Note$)=2 THEN NoteName$=LEFT$(Note$,1) ELSE NoteName$=LEFT$(Note$,2 )
1120 Octave%=VAL(RIGHT$(Note$,1))
1130 PositionInScale%=(INSTR(Scale$,NoteName$))/3
1140 Pitch%=Key%+PositionInScale%*4+(Octave%-1)*48
1150 IF Pitch%<0 OR Pitch%>255 PRINT"ERROR IN PITCH DATA ";Note$;" Pitch = ";Pitch%:STOP
1160 ENDPROC
1170
1180 DEF PROCPlayChord(Chan%,Env%)
1190 SOUNDChan%,Env%,Pitch%,Tempo%
1200 ENDPROC
1210
1220 DEF PROCBass(Pit%)
1230 IF ADVAL(-8)>0 SOUND3,Env3%,Pit%,Tempo%
1240 ENDPROC
1250
1260 DEF PROCSync
1270 REM GOTO Required Syncopation
1280 ON SyncPoint GOTO 1300,1370,1400,1310
1290
1300 IF Beat%=1 Tempo%=Tempo1%*1.5 ELSE IF Beat%=2 Tempo%=Tempo1%*.5 ELSE Tempo%=Tempo1%
1310 ENDPROC
1320
1330 REM Out Of Sync
1340 IF Beat%=1 Tempo%=Tempo1%*2 ELSE IF Beat%=2 Beat%=3 ELSE Tempo%=Tempo1% 1350 ENDPROC
1360
1370 IF Beat%=NoOfBeats% OR Beat%=NoOfBeats%+1 Tempo%=Tempo1%*.5 ELSE IF Beat%= 1 Tempo%=Tempo1%*2 ELSE Tempo%=Tempo1%
1380 ENDPROC
1390
1400 IF Beat%=NoOfBeats% OR Beat%=NoOfBeats%+1 OR Beat%=NoOfBeats%+2 OR Beat%=NoOfBeats%+3 Tempo%=Tempo1%*.5:PROCPlay
1410 ENDPROC
1420
1430 IF Beat% MOD 2=1 Tempo%=Tempo1%*.7 5 ELSE IF Beat% MOD 2=0 Tempo%=Tempo1%*.25
1440 ENDPROC
1450
1460 REM Major
1470 DATA G1,C2,E2,G2,C3,E3
1480
1490 REM Seventh
1500 DATA A#1,C2,E2,G2,A#2,C3
1510
1520 REM Major Ninth
1530 DATA D2,E2,G2,A#2,C3,D3
1540
1550 REM Minor
1560 DATA G1,C2,D#2,G2,C3,D#3
1570
1580 REM Minor 6th
1590 DATA A1,C2,D#2,G2,A2,C3
1600
1610 REM Minor 7th
1620 DATA A#1,C2,D#2,G2,A#2,C3
1630
1640 REM Minor Ninth
1650 DATA D2,D#2,G2,A#2,C3,D3
1660
1670 REM Major 6th
1680 DATA A1,C2,E2,G2,A2,C3
1690
1700 REM Major 7th
1710 DATA B1,C2,E2,G2,B2,C3
1720
1730 REM Augmented
1740 DATA G#1,C2,E2,G#2,C3,E3
1750
1760 REM Diminished
1770 DATA D#2,F#2,A2,C3,D#3,F#3


### The Amazing One Line Wonder Composer program

If you do not want to check through the music or DATA statements of a particular piece, you can find the highest and lowest notes by adding the following (to programs based on Program 9.2):

1 HiP=0:LoP=255
851 IF Pitch>HiP HiP=Pitch
852 IF Pitch<LoP LoP=Pitch

Here is the line to insert in Rondo:

855 Pitch=77+77-Pitch

For the Dance of the Sugar-plum Fairy insert: 

855 Pitch=117+117-Pitch

and this for the Liberty Bell:

855 Pitch=85+85-Pitch


## Chapter 12

### Adding harmony to a melody line

1 REM PROGRAM 12.1
2 REM Pseudo Harmony Additions
3 REM Insert In PROGRAM 9.1
4
300 PRINT Note$;TAB(6);Pitch;
310 SOUND1,Env,Pitch,Dur
311 PROCHarmonise
315 SOUND2,Env,Pitch-P,Dur
316 PRINTTAB(12);Pitch-P
420
430 DEF PROCHarmonise
440 HarmPoint=RND(12)
450 ON HarmPoint GOTO 460,470,470,470,470,480,480,480,490,490,500,510
460 P=8:ENDPROC
470 P=12:ENDPROC
480 P=20:ENDPROC
490 P=28:ENDPROC
500 P=32:ENDPROC
510 P=48:ENDPROC




1 REM PROGRAM 12.2
2 REM DATA Statements For
3 REM Liberty Bell
4 REM For Use in PROGRAM 12.1
5
110 FOR N=1 TO 110
180 DATA C3,3
182 DATA A2,6,A2,3,A2,3,G#2,3,A2,3
184 DATA F3,6,C3,3,C3,6,A2,3
186 DATA A#2,6,A#2,3,A#2,6,C3,3
188 DATA D3,15,A#2,3
190 DATA G2,6,G2,3,G2,3,F#2,3,G2,3
192 DATA E3,6,D3,3,D3,6,A#2,3
194 DATA A2,6,A2,3,A2,6,A#2,3
196 DATA C3,15,C3,3
198 DATA A2,6,A2,3,A2,3,G#2,3,A2,3
200 DATA A3,6,F3,3,F3,6,C3,3
202 DATA B2,6,G3,3,G3,6,G3,3
204 DATA G3,15,F3,3
206 DATA E3,6,G3,3,G3,3,F#3,3,G3,3
208 DATA D3,6,G3,3,G3,3,F#3,3,G3,3
210 DATA C3,6,B2,3,C3,6,B2,3
212 DATA C3,9,C3,9
214 REM 2nd Part
216 DATA A2,3,G#2,3,A2,3,D3,6,C3,3
218 DATA A2,9,F2,9
220 DATA D2,9,G2,9
222 DATA F2,15,F2,3
224 DATA G2,3,A2,3,A#2,3,E3,6,D3,3
226 DATA C3,9,F3,9
228 DATA E3,9,D3,9
230 DATA C3,15,C3,3
232 DATA D3,6,D3,2,E3,1,D3,3,C#3,3,D3,3
234 DATA E3,9,E3,9
236 DATA F3,6,F3,2,A3,1,G3,3,F3,3,G3,3
238 DATA A3,15,A3,2,A3,1
240 DATA G3,6,F3,3,D3,6,A#2,3
242 DATA A2,9,F2,9
244 DATA G2,9,E2,9
246 DATA F2,12
248
250
260
270


### The computer as a transposition aid

10 REM PROGRAM 12.3
20 REM Transposition Program
30
40 ON ERROR GOTO 2270
50
60 *TV255,1
70 REM Disable ESCAPE key:*FX220,1
80
90 REM Switch on CAPS LOCK
100 *FX202,32
110
120 PROCSetUp
130
140 End=FALSE
150 MODE7
160 PROCMenu
170 IF End CLS:END
180
190 MODE4
200 PROCWindows
210 PROCDisplayScales
220 GOTO150
230 END
240
250 DEF PROCSetUp
260 TClef=844:LClef=628
270 TR$=CHR$130+"TRANSPOSITION PROGRAM"
280
290 REM Treble Clef Characters
300 VDU23,229,32,32,32,160,64,0,0,0
310 VDU23,230,39,39,167,167,38,36,248,
240
320 VDU23,231,228,230,102,51,24,12,7,3
330 VDU23,232,160,32,32,32,120,164,38,
39
340 VDU23,233,1,3,12,24,48,97,227,230
350 VDU23,234,34,34,36,36,40,48,32,96
360 VDU23,235,35,35,35,35,35,35,35,35
370 VDU23,236,0,0,0,0,0,8,20,34
380 TC$=CHR$9+CHR$236+CHR$8+CHR$10+CHR$235+CHR$8+CHR$10+CHR$234+CHR$8+CHR$8+CHR$10+CHR$233+CHR$232+CHR$8+CHR$8+CHR$10+CHR$231+CHR$230+CHR$8+CHR$10+CHR$229
390
400 REM Bass Clef Characters
410 VDU23,237,31,127,192,128,128,184,120,56
420 VDU23,238,128,192,224,115,51,48,48,48
430 VDU23,239,48,51,51,48,48,32,64,128
440 VDU23,240,1,2,4,8,16,32,0,0
450 BC$=CHR$237+CHR$238+CHR$8+CHR$10+CHR$239+CHR$8+CHR$8+CHR$10+CHR$240
460
470 REM Semibrieve
480 VDU23,224,0,28,34,66,68,56,0,0
490
500 REM Crotchet
510 VDU23,225,0,28,62,126,124,56,0,0
520
530 REM Natural
540 VDU23,226,64,76,84,100,76,84,100,4
550
560 REM Flat
570 VDU23,227,64,64,92,102,70,76,120,0
580 F$=CHR$227
590
600 REM Sharp
610 VDU23,238,36,36,126,36,36,126,36,36
620 S$="#":REM S$=CHR$228
630
640 REM Offset for Lower Scale Notes
650 DIM OffSetArray%(12,12)
660 RESTORE 840
670 FOR TScale%=0 TO 12
680 FOR LScale%=0 TO 12
690 READ OffSetArray%(TScale%,LScale%)
700 NEXT LScale%
710 NEXT TScale%
720
730 DIM KeyArray$(12),MinKeyArray$(12)
740 RESTORE 980
750 FOR A=0 TO 12
760 READ K$:IF A>7 K$=K$+CHR$227
770 READ M$:IF A>10 M$=M$+CHR$227
780 KeyArray$(A)=K$
790 MinKeyArray$(A)=M$
800 NEXT A
810
820 ENDPROC
830
840 DATA 0,3,-1,2,-2,1,-3,-3,1,-2,2,-1,3
850 DATA -3,0,3,-1,2,-2,1,1,-2,2,-1,3,0
860 DATA 1,-3,0,3,-1,2,-2,-2,2,-1,3,0,-3
870 DATA -2,1,-3,0,3,-1,2,2,-1,3,0,-3,1
880 DATA 2,-2,1,-3,0,3,-1,-1,3,0,-3,1,-2
890 DATA -1,2,-2,1,-3,0,3,3,0,-3,1,-2,2
900 DATA 3,-1,2,-2,1,-3,0,0,-3,1,-2,2,-1
910 DATA 3,-1,2,-2,1,-3,0,0,-3,1,-2,2,-1
920 DATA -1,2,-2,1,-3,0,3,3,0,-3,1,-2,2
930 DATA 2,-2,1,-3,0,3,-1,-1,3,0,-3,1,-2
940 DATA -2,1,-3,0,3,-1,2,2,-1,3,0,-3,1
950 DATA 1,-3,0,3,-1,2,-2,-2,2,-1,3,0,-3
960 DATA -3,0,3,-1,2,-2,1,1,-2,2,-1,3,0
970
980 DATA C,A,G,E,D,B,A,F#,E,C#,B,G#,F#,D#,F,D,B,G,E,C,A,F,D,B,G,E
990
1000 DEF PROCMenu:CLS:PROCdd(TR$,8,0)
1010 PRINTTAB(3,3)CHR$131"Here are your options:"
1020 PRINT'CHR$129" 1.."CHR$130"Treble Clef."'CHR$129" 2.."CHR$130"Bass Clef."'CHR$129" 3.."CHR$130"End Program."
1030 PRINT'CHR$131" Please enter your choice ("CHR$129"1-3"CHR$131")?"CHR$129;
1040 PROCInput(48,52)
1050 IF Key%=49 Clf%=1:NOSet=-36
1060 IF Key%=50 Clf%=2:NOSet=-12
1070 IF Key%=51 End=TRUE:ENDPROC
1080
1090 PROCGetSF("original"):OAc%=Key%-48:Okey$=LEFT$(Ac$,1):IF Okey$="F" OAc%=OAc%+6
1100 PROCGetSF("new"):NAc%=Key%-48:Nkey$=LEFT$(Ac$,1):IF Nkey$="F" NAc%=NAc%+6
1110
1120 OffSet%=OffSetArray%(OAc%,NAc%)*12
1130
1140 PRINT'TAB(12)CHR$136CHR$131"THANKYOU":PROCD(200)
1150 ENDPROC
1160
1170 REM Double Height Letters
1180 DEF PROCdd(P$,a%,b%):FOR L%=0 TO 1:PRINTTAB(a%,b%+L%)CHR$141;P$:NEXT:ENDPROC
1190
1200 DEF PROCInput(Min%,Max%):REPEAT:Key%=GET:UNTIL Key%>Min% AND Key%<Max%:PRINTCHR$Key%:ENDPROC
1210
1220 DEF PROCGetSF(Key$)
1230 PRINT'CHR$131" Has the "Key$" key any sharps"'CHR$131" or flats ("CHR$129"S, F or N"CHR$131")?"CHR$129;
1240 REPEAT:Ans=GET:UNTIL (Ans=83 OR Ans=70 OR Ans=78):PRINTCHR$Ans:IF Ans=83 Ac$="Sharps" ELSE IF Ans=70 Ac$="Flats" ELSE Ac$="N"
1250 IF Ans=78 Key%=48:ENDPROC
1260
1270 PRINT'CHR$131"How many ";Ac$;" has it? ("CHR$129"1-6"CHR$131")?"CHR$129;:PROCInput(48,55)
1280 ENDPROC
1290
1300 DEF PROCWindows
1310 REM Set Graphics Window
1320 VDU24,0;256;1279;1023;
1330
1340 REM Background Yellow
1350 VDU19,129,131,0,0,0
1360 GCOL0,129:CLG
1370
1380 REM Foreground Black
1390 GCOL0,0
1400
1410 REM Set Text Window
1420 VDU28,030,39,24
1430 ENDPROC
1440
1450 DEF PROCDisplayScales
1460 PROCStave
1470 Hinote%=904:Lonote%=712
1480
1490 Scal=1
1500 PROCScale(Hinote%)
1510 Hinote%=Hinote%-216-OffSet%:Lonote%=Lonote%-216-OffSet%
1520
1530 Scal=2:NOSet=NOSet+48
1540 PROCScale(Lonote%-64)
1550
1560 *FX15,1
1570 PRINT''"Press ""RETURN"" to return to Menu. ";:PROCInput(12,14)
1580 ENDPROC
1590
1600 REM Draw Staves
1610 DEF PROCStave
1620 PROCS(TClef):PROCS(LClef)
1630 IF Clf%=1 PROCClef(TC$,TClef+62):PROCClef(TC$,LClef+62) ELSE PROCClef(BC$, TClef):PROCClef(BC$,LClef)
1640
1650 PROCKeySig(Okey$,OAc%,TClef+14)
1660 PROCGetKey(OAc%,TClef+160)
1670 PROCKeySig(Nkey$,NAc%,LClef+16)
1680 PROCGetKey(NAc%,LClef-256)
1690
1700 ENDPROC
1710
1720 REM Draw the Lines
1730 REM Distance between a line and
1740 REM space = 12
1750 DEF PROCS(L%):FOR Line%=L% TO L%-96 STEP-24:MOVE0,Line%:DRAW1280,Line%:NEXT:ENDPROC
1760
1770 REM Print Clef(s)
1780 DEF PROCClef(C$,Pos%):VDU5:MOVE24,Pos%:PRINTC$:VDU4:ENDPROC
1790
1800 DEF PROCD(Delay%):DL=TIME:REPEATUNTILTIME>DL+Delay%:ENDPROC
1810
1820 REM Print Notes of Scale
1830 DEF PROCScale(Pos%)
1840 X%=240
1850 Dif%=48
1860
1870 FOR Y%=Lonote% TO Hinote% STEP12:X%=X%+Dif%:PROCNote("S"):N%=((Y%+NOSet)/12)MOD7 +65:VDU5:MOVEX%,Pos%+32:PRINTCHR$ N%:VDU4:NEXT
1880 ENDPROC
1890
1900 DEF PROCNote(n$):VDU5
1910 IF n$="S" n$=CHR$224
1920 IF n$="C" n$=CHR$225
1930 MOVEX%,Y%:PRINTn$
1940
1950 IF Y%>=TClef+36 PROCLeg(TClef+36,24)
1960 IF Y%<=LClef-108 PROCLeg(LClef-108,-24)
1970 IF Scal=1:IF Y%<=TClef-108 PROCLeg(TClef-108,-24)
1980 IF Scal=2:IF Y%>=LClef-36 PROCLeg(LClef-36,24)
1990
2000 ENDPROC
2010
2020 DEF PROCLeg(H%,Step%):FOR Le%=H% TO Y% STEP Step%:MOVEX%,Le%-12:DRAWX%+28, Le%-12:NEXT:ENDPROC
2030
2040 DEF PROCKeySig(SF$,Sig%,Y%)
2050 IF SF$="S" n$=S$:Y%=Y%-2:RESTORE 2230 ELSE IF SF$="F" n$=F$:Sig%=Sig%-6:Y% =Y%-46:RESTORE 2240 ELSE ENDPROC
2060
2070 IF Clf%=2 Y%=Y%-24
2080 X%=96
2090 VDU5
2100 FOR a%=1 TO Sig%
2110 READ y%:MOVEX%,Y%+y%:PRINTn$
2120 X%=X%+24
2130 NEXT a%
2140 VDU4
2150 ENDPROC
2160
2170 DEF PROCGetKey(No,Pos)
2180 MajKey$=KeyArray$(No)
2190 MinKey$=MinKeyArray$(No)+" Minor"
2200 VDU5:MOVE32,Pos:PRINT"Key=";MajKey$;" Relative Minor=";MinKey$:VDU4
2210 ENDPROC
2220
2230 DATA 0,-36,12,-24,-60,-12 
2240 DATA 0,36,-12,24,-24,12
2250
2260 REM ERROR Routine
2270 REPORT:PRINTERR;" at line ";ERL

BUG??? line 690 Array

650 DIM OffSetArray(12,12)
should be
650 DIM OffSetArray%(12,12)

line 2190 array

2190 MinKey$=MinKeyArray(No)+" Minor"
should be 
2190 MinKey$=MinKeyArray$(No)+" Minor"


#### Transpose in the opposite direction 

1120 Offset%= OffSetArray%(OAc%,NAc%)
1125 OffSet%=(OffSet%-7*SGN(OffSet%))*12


## Chapter 13

### Sound and animation synchronization

1 REM PROGRAM 14.1
2 REM Animated/Synchronised Dancer
3 REM Insert in PROGRAM 9.5/9.2
4
195 MODE 5
197 PROCFigures
198 VDU23,1,0;0;0;0;
634 x%=0:y%=10:m%=0:d%=0
640
650 Ch1=0:Ch2=0:Ch3=0
680 IF ADVAL(-6)>14 AND Ch1<C1 Ch1=Ch1+1:SOUNDChan1(1,Ch1)+1,Chan1(2,Ch1),Chan1(3,Ch1),Chan1(4,Ch1)*Tempo:IF Ch1<82 OR Ch1>97 PROCCartoon
690 IF ADVAL(-7)>14 AND Ch2<C2 Ch2=Ch2+1:SOUNDChan2(1,Ch2)+2,Chan2(2,Ch2),Chan2(3,Ch2),Chan2(4,Ch2)*Tempo:IF Ch2>69 AND Ch2<92 PROCCartoon
725 VDU23,1,1,0;0;0;
2000 DEF PROCFigures
2010 VDU23,224,124,254,68,130,130,68,40,100
2020 VDU23,225,16,56,40,16,56,84,146,56
2030 VDU23,227,40,40,40,40,40,0,0,0
2040 VDU23,228,146,16,56,124,254,40,40, 40
2050 VDU23,229,0,16,56,40,16,56,84,146
2060 M1$=" "+CHR$8+CHR$8+CHR$8+CHR$10 +" "+CHR$225+" "+CHR$8+CHR$8+CHR$8+CHR$10+" "+CHR$224+" "
2070 M2$=" "+CHR$229+CHR$8+CHR$8+CHR$10 +" "+CHR$228+" "+CHR$8+CHR$8+CHR$8+CHR$10+" "+CHR$227+" "
2080
2090 COLOUR 2
2100 ENDPROC
2110
2120
2130 DEF PROCCartoon
2140 m%=m% EOR 1
2150 IF m%=1 PRINTTAB(x%,y%)M2$ ELSE PRINTTAB(x%,y%)M1$
2160 IF x%>17 d%=1
2170 IF x%<2 d%=0
2180 IF d%=0 x%=x%+1 ELSE x%=x%-1
2190 ENDPROC

### Hercules

10 REM PROGRAM 14.2
20 REM "Hercules"
30 REM Sound and Animation in Sync 
40 REM Insert in PROGRAM 9.2
50
90 C1=53:C2=47:C3=35
250 ENVELOPE1,1,0,0,0,0,0,0,126,-4,-1, -6,126,100
260 ENVELOPE2,2,0,0,1,4,0,1,126,-3,0,- 6,126,100
270 ENVELOPE3,3,0,8,-8,0,1,1,110,0,0,- 10,110,110
272 ENVELOPE4,4,0,0,1,1,0,1,126,-8,-8, -16,126,100
274 ENVELOPE5,3,0,0,1,1,0,1,63,-8,-8,- 16,126,100
276 ENVELOPE6,6,0,0,0,0,0,0,126,0,0,-1,126,126
278 ENVELOPE7,1,0,0,0,0,0,0,126,-10,-10,-10,126,0
330 IF Note$="R" Env=0 ELSE IF (N=35 OR N=42) Env=3 ELSE IF N<19 Env=1 ELSE Env=2
450 IF Note$="R" Env=0 ELSE Env=4
570 IF Note$="R" Env=0 ELSE Env=5
651 PROCMan
652 MODE 5
653 VDU23,1,0;0;0;0;
654 m%=0:x%=8:y%=12
655 COLOUR1
656 PRINT'"Ladies and Gentlemen"
657 PRINTTAB(5)"Presenting"
658 PRINT''TAB(6)"HERCULES"
659 SOUND0,6,4,40:SOUND1,0,0,180
660 SOUND&1000,0,0,80:FOR S=1 TO 4:SOUND0,7,4,4:NEXT S
661 COLOUR 2
662
670 REPEAT
680 IF ADVAL(-6)>14 AND Ch1<C1 Ch1=Ch1+1:PROCCartoon:SOUNDChan1(1,Ch1)+1,Chan1(2,Ch1),Chan1(3,Ch1),Chan1(4,Ch1)*Tempo
690 IF ADVAL(-7)>14 AND Ch2<C2 Ch2=Ch2+1:SOUNDChan2(1,Ch2)+2,Chan2(2,Ch2),Chan2(3,Ch2),Chan2(4,Ch2)*Tempo
700 IF ADVAL(-8)>14 AND Ch3<C3 Ch3=Ch3+1:SOUNDChan3(1,Ch3)+3,Chan3(2,Ch3),Chan3(3,Ch3),Chan3(4,Ch3)*Tempo
710 UNTIL Ch1=C1 AND Ch2=C2 AND Ch3=C3
721 COLOUR1
722 PRINTTAB(10,y%+5)"Thank You"
723 PRINT'TAB(6)"...Signed HERC"
724 VDU23,1,1;0;0;0;
725 SOUND0,6,4,40
880 REM Channel 1
890 DATA &200,D3,8,E3,6,D3,2,B2,8,B2,8
900 DATA &200,B2,6,A2,2,B2,6,C3,2,B2,16
910 DATA &200,C3,8,A2,6,D3,2,B2,16
920 DATA &200,G2,8,E2,6,A2,2,D2,16
930 DATA &200,A2,20,E3,4,D3,4,C3,4
940 DATA &200,B2,4,A2,4,B2,4,C3,4,B2,16
950 DATA &200,F#2,8,B2,8,B2,8,A#2,6,C#3,2
960 DATA &200,F#3,32
970 DATA &200,R,4,E3,4,D#3,4,E3,4,A2,4,B2,4,C3,8
980 DATA &200,R,4,B2,4,G2,4,E3,4,D3,16
990 DATA &200,R,4,G2,4,D2,4,C3,4,B2,8,A2,8
1000 DATA &200,G2,16,R,16
1010 REM Channel 2
1020 DATA &200,G1,8,D1,8,G1,8,D1,8
1030 DATA &200,G1,8,D1,8,G1,8,D1,8
1040 DATA &200,A1,8,F#1,8,G1,8,F#1,8
1050 DATA &200,E1,8,C#1,8,D1,8,F#1,8
1060 DATA &200,A1,8,C2,8,A1,8,C2,8
1070 DATA &200,G1,8,B1,8,E1,8,B1,8
1080 DATA &200,F#1,8,B1,8,F#1,8,A#1,8
1090 DATA &200,B1,8,F#1,8,D#1,8,B0,8
1100 DATA &200,C1,8,A1,8,E1,8,A1,8
1110 DATA &200,D1,8,G1,8,R,4,B1,4,G1,4,E2,4
1120 DATA &200,D2,8,R,16,F#1,8
1130 DATA &200,G1,16,R,16
1140 REM Channel 3
1150 DATA &200,B1,8,R,8,B1,8,R,8 
1160 DATA &200,B1,8,R,8,B1,8,R,8 
1170 DATA &200,R,32
1180 DATA &200,R,32
1190 DATA &200,R,8,E2,8,R,8,E2,8
1200 DATA &200,R,8,E2,8,R,8,E2,8
1210 DATA &200,D2,8,R,8,C#2,8,R,8
1220 DATA &200,D#2,8,R,24
1230 DATA &200,R,8,C2,8,R,8,C2,8
1240 DATA &200,R,8,B1,8,R,16
1250 DATA &200,R,24,D1,8
1260 DATA &200,B1,16,R,16
1270
1280 DEF PROCMan
1290 VDU23,234,128,128,128,128,128,128,128,255
1300 VDU23,235,0,6,8,16,32,76,158,255
1310 VDU23,236,24,60,90,255,90,36,24,255
1320 VDU23,237,7,1,1,1,1,1,1,255
1330 VDU23,238,0,96,16,8,4,50,121,255
1340 VDU23,241,255,126,60,24,24,24,24,126
1350 VDU23,242,24,24,24,24,24,24,24,126
1360 VDU23,246,126,36,38,38,100,100,36,231
1370 VDU23,247,126,36,100,100,38,38,36,231
1380 Man1$=CHR$234+CHR$236+CHR$237+CHR$8+CHR$8+CHR$10+CHR$241+CHR$8+CHR$10+CHR$246
1390 Man2$=CHR$234+CHR$236+CHR$238+CHR$8+CHR$8+CHR$10+CHR$241+CHR$8+CHR$10+CHR$247
1400 Man3$=CHR$234+CHR$236+CHR$238+CHR$8+CHR$8+CHR$10+CHR$242+CHR$8+CHR$10+CHR$247
1410 Man4$=CHR$234+CHR$236+CHR$237+CHR$8+CHR$8+CHR$10+CHR$241+CHR$8+CHR$10+CHR$247
1420 Man5$=CHR$234+CHR$236+CHR$237+CHR$8+CHR$8+CHR$10+CHR$242+CHR$8+CHR$10+CHR$246
1430 ENDPROC
1440
1450 DEF PROCCartoon
1460 m%=m% EOR 1
1470 PRINTTAB(x%,y%);
1480 IF Ch1=1 PRINTMan4$:ENDPROC
1490 IF Ch1=C1 Wait=INKEY(60):PRINTMan4$:ENDPROC
1500 IF Ch1<19 AND m%=0 PRINTMan1$:ENDPROC ELSE IF Ch1<19 AND m%=1 PRINTMan2$:ENDPROC
1510 IF Ch1<35 AND m%=0 PRINTMan4$:ENDPROC ELSE IF Ch1<35 AND m%=1 PRINTMan5$:E NDPROC
1520 IF m%=0 PRINTMan1$ ELSE IF m%=1 PRINTMan3$
1530 ENDPROC

BUG???: Line 1090 B0 error in pitch data (check calculation in line 840)
